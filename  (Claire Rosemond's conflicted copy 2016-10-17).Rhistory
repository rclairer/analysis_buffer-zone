spring.wil.f$NEAR_DIST <- as.numeric(spring.wil.f$NEAR_DIST)
spring.wil.f <- mutate(spring.wil.f, NEAR_DIST_nautical = NEAR_DIST / 6076.12) #nautical miles
#filter by site
site330.fall <- filter(fall.MHC.f, IN_Site == '330' & NEAR_Site == '330')
site330.winter <- filter(winter.MHC.f, IN_Site == '330' & NEAR_Site == '330')
site330.spring <- filter(spring.MHC.f, IN_Site == '330' & NEAR_Site == '330')
site345.fall <- filter(fall.MHC.f, IN_Site == '345' & NEAR_Site == '345')
site345.winter<- filter(winter.MHC.f, IN_Site == '345' & NEAR_Site == '345')
site345.spring <- filter(spring.MHC.f, IN_Site == '345' & NEAR_Site == '345')
site364.fall<- filter(fall.wil.f, IN_Site == '364' & NEAR_Site == '364')
site364.winter<- filter(winter.wil.f, IN_Site == '364' & NEAR_Site == '364')
site364.spring<- filter(spring.wil.f, IN_Site == '364' & NEAR_Site == '364')
site370.fall<- filter(fall.wil.f, IN_Site == '370' & NEAR_Site == '370')
site370.winter<- filter(winter.wil.f, IN_Site == '370' & NEAR_Site == '370')
site370.spring<- filter(spring.wil.f, IN_Site == '370' & NEAR_Site == '370')
site372.fall<- filter(fall.wil.f, IN_Site == '372' & NEAR_Site == '372')
site372.winter<- filter(winter.wil.f, IN_Site == '372' & NEAR_Site == '372')
site372.spring<- filter(spring.wil.f, IN_Site == '372' & NEAR_Site == '372')
site378.fall<- filter(fall.wil.f, IN_Site == '378' & NEAR_Site == '378')
site378.winter<- filter(winter.wil.f, IN_Site == '378' & NEAR_Site == '378')
site378.spring<- filter(spring.wil.f, IN_Site == '378' & NEAR_Site == '378')
#combine MHC
MHC <- rbind(fall.MHC.f, winter.MHC.f, spring.MHC.f)
#combine wil
wil <- rbind(fall.wil.f, winter.wil.f, spring.wil.f)
```
ggplot() +
stat_smooth(data = site330.fall, aes(x=NEAR_DIST_nautical, y=BCD), color = "red", span = 2, se = FALSE)+
stat_smooth(data = site330.winter, aes(x=NEAR_DIST_nautical, y=BCD), color = "magenta", span = 2, se = FALSE)+
#stat_smooth(data = site345.fall, aes(x=NEAR_DIST_nautical, y=BCD), color = "blue", span = 2, se = FALSE)+
stat_smooth(data = site345.spring, aes(x=NEAR_DIST_nautical, y=BCD), color = "green", span = 2, se = FALSE)+
stat_smooth(data = site364.fall, aes(x=NEAR_DIST_nautical, y=BCD), color = "purple", span = 2, se = FALSE)+
stat_smooth(data = site364.spring, aes(x=NEAR_DIST_nautical, y=BCD), color = "coral", span = 2, se = FALSE)+
stat_smooth(data = site364.winter, aes(x=NEAR_DIST_nautical, y=BCD), color = "orange", span = 2, se = FALSE)+
stat_smooth(data = site370.fall, aes(x=NEAR_DIST_nautical, y=BCD), color = "yellow", span = 2, se = FALSE)+
#stat_smooth(data = site370.spring, aes(x=NEAR_DIST_nautical, y=BCD), color = "firebrick", span = 2, se = FALSE)+
stat_smooth(data = site370.winter, aes(x=NEAR_DIST_nautical, y=BCD), color = "violet", span = 2, se = FALSE)+
#stat_smooth(data = site372.fall, aes(x=NEAR_DIST_nautical, y=BCD), color = "springgreen", span = 2, se = FALSE)+
stat_smooth(data = site372.spring, aes(x=NEAR_DIST_nautical, y=BCD), color = "steelblue", span = 2, se = FALSE)+
stat_smooth(data = site372.winter, aes(x=NEAR_DIST_nautical, y=BCD), color = "peachpuff", span = 2, se = FALSE)+
#stat_smooth(data = site378.fall, aes(x=NEAR_DIST_nautical, y=BCD), color = "black", span = 2, se = FALSE)+
#stat_smooth(data = site378.winter, aes(x=NEAR_DIST_nautical, y=BCD), color = "grey", span = 2, se = FALSE)+
theme_classic () +  scale_y_continuous(name="Bray Curtis Dissimilarity", limits=c(0, 1), breaks=seq(0, 1, by=0.05)) + scale_x_continuous(name = "Distance (nautical miles)", limits=c(0, 0.8), breaks=seq(0, 0.8,by=0.1)) + ggtitle("All sites, all seasons")
ggplot() +
geom_point(data = site330.fall, aes(x=NEAR_DIST_nautical, y=BCD), color = "red")+
geom_point(data = site330.winter, aes(x=NEAR_DIST_nautical, y=BCD), color = "magenta")+
#geom_point(data = site345.fall, aes(x=NEAR_DIST_nautical, y=BCD), color = "blue")+
geom_point(data = site345.spring, aes(x=NEAR_DIST_nautical, y=BCD), color = "green")+
geom_point(data = site364.fall, aes(x=NEAR_DIST_nautical, y=BCD), color = "purple")+
geom_point(data = site364.spring, aes(x=NEAR_DIST_nautical, y=BCD), color = "coral")+
geom_point(data = site364.winter, aes(x=NEAR_DIST_nautical, y=BCD), color = "orange")+
#geom_point(data = site370.fall, aes(x=NEAR_DIST_nautical, y=BCD), color = "yellow")+
#geom_point(data = site370.spring, aes(x=NEAR_DIST_nautical, y=BCD), color = "firebrick")+
geom_point(data = site370.winter, aes(x=NEAR_DIST_nautical, y=BCD), color = "violet")+
#geom_point(data = site372.fall, aes(x=NEAR_DIST_nautical, y=BCD), color = "springgreen")+
#geom_point(data = site372.spring, aes(x=NEAR_DIST_nautical, y=BCD), color = "steelblue")+
geom_point(data = site372.winter, aes(x=NEAR_DIST_nautical, y=BCD), color = "peachpuff")+
#geom_point(data = site378.fall, aes(x=NEAR_DIST_nautical, y=BCD), color = "black")+
#geom_point(data = site378.winter, aes(x=NEAR_DIST_nautical, y=BCD), color = "grey")+
theme_classic () +  scale_y_continuous(name="Bray Curtis Dissimilarity", limits=c(0, 1), breaks=seq(0, 1, by=0.05)) + scale_x_continuous(name = "Distance (nautical miles)", limits=c(0, 0.8), breaks=seq(0, 0.8,by=0.1)) + ggtitle("All sites, all seasons")
ggplot() +
geom_point(data = site330.fall, aes(x=NEAR_DIST_nautical, y=BCD), color = "red")+
geom_point(data = site330.winter, aes(x=NEAR_DIST_nautical, y=BCD), color = "magenta")+
geom_point(data = site345.fall, aes(x=NEAR_DIST_nautical, y=BCD), color = "blue")+
geom_point(data = site345.spring, aes(x=NEAR_DIST_nautical, y=BCD), color = "green")+
geom_point(data = site364.fall, aes(x=NEAR_DIST_nautical, y=BCD), color = "purple")+
geom_point(data = site364.spring, aes(x=NEAR_DIST_nautical, y=BCD), color = "coral")+
geom_point(data = site364.winter, aes(x=NEAR_DIST_nautical, y=BCD), color = "orange")+
geom_point(data = site370.fall, aes(x=NEAR_DIST_nautical, y=BCD), color = "yellow")+
geom_point(data = site370.spring, aes(x=NEAR_DIST_nautical, y=BCD), color = "firebrick")+
geom_point(data = site370.winter, aes(x=NEAR_DIST_nautical, y=BCD), color = "violet")+
geom_point(data = site372.fall, aes(x=NEAR_DIST_nautical, y=BCD), color = "springgreen")+
geom_point(data = site372.spring, aes(x=NEAR_DIST_nautical, y=BCD), color = "steelblue")+
geom_point(data = site372.winter, aes(x=NEAR_DIST_nautical, y=BCD), color = "peachpuff")+
geom_point(data = site378.fall, aes(x=NEAR_DIST_nautical, y=BCD), color = "black")+
geom_point(data = site378.winter, aes(x=NEAR_DIST_nautical, y=BCD), color = "grey")+
theme_classic () +  scale_y_continuous(name="Bray Curtis Dissimilarity", limits=c(0, 1), breaks=seq(0, 1, by=0.05)) + scale_x_continuous(name = "Distance (nautical miles)", limits=c(0, 0.8), breaks=seq(0, 0.8,by=0.1)) + ggtitle("All sites, all seasons")
all.points.test <- rbind(site330.fall, site330.winter, site345.fall, site345.spring, site364.fall, site364.spring, site364.winter, site370.fall, site370.spring, site370.winter, site372.fall, site372.winter, site372.spring, site378.fall, site378.winter)
all.points.test <- rbind(site330.fall, site330.spring, site330.winter, site345.fall, site345.spring, site345.winter, site364.fall, site364.spring, site364.winter, site370.fall, site370.spring, site370.winter, site372.fall, site372.winter, site372.spring, site378.fall, site378.winter)
all.points.test <- rbind(site330.fall, site330.winter, site345.spring, site364.fall, site364.spring, site364.winter, site370.winter, site372.winter)
all.points.test <- rbind(site330.fall, site330.winter, site345.spring, site364.fall, site364.spring, site364.winter, site370.winter, site372.winter)
all.points.test <- rbind(site330.fall, site330.winter, site345.spring, site364.fall, site364.spring, site364.winter, site370.fall, site370.winter, site372.winter)
all.points.test
all.points.test <- rbind(site330.fall, site330.winter, site345.spring, site364.fall, site364.spring, site364.winter, site370.winter, site372.winter)
all.points.test.plot = ggplot(all.points.test, aes(x=as.numeric(NEAR_DIST_nautical), y=as.numeric(BCD)))
all.points.test.plot + geom_point () +theme_classic () +  scale_y_continuous(name="Bray Curtis Dissimilarity", limits=c(0, 1), breaks=seq(0, 1, by=0.05)) + scale_x_continuous(name = "Distance (nautical miles)", limits=c(0, 0.8), breaks=seq(0, 0.8,by=0.1)) + ggtitle("all points") +
stat_smooth()
all.points.test <- rbind(site330.fall, site330.spring, site330.winter, site345.fall, site345.spring, site345.winter, site364.fall, site364.spring, site364.winter, site370.fall, site370.spring, site370.winter, site372.fall, site372.winter, site372.spring, site378.fall, site378.winter)
all.points.test.plot = ggplot(all.points.test, aes(x=as.numeric(NEAR_DIST_nautical), y=as.numeric(BCD)))
all.points.test.plot + geom_point () +theme_classic () +  scale_y_continuous(name="Bray Curtis Dissimilarity", limits=c(0, 1), breaks=seq(0, 1, by=0.05)) + scale_x_continuous(name = "Distance (nautical miles)", limits=c(0, 0.8), breaks=seq(0, 0.8,by=0.1)) + ggtitle("all points") +
stat_smooth()
all.points.test <- rbind(site330.fall, site330.winter, site345.spring, site364.fall, site364.spring, site364.winter, site370.fall, site370.winter, site372.winter)
all.points.test.plot = ggplot(all.points.test, aes(x=as.numeric(NEAR_DIST_nautical), y=as.numeric(BCD)))
all.points.test.plot + geom_point () +theme_classic () +  scale_y_continuous(name="Bray Curtis Dissimilarity", limits=c(0, 1), breaks=seq(0, 1, by=0.05)) + scale_x_continuous(name = "Distance (nautical miles)", limits=c(0, 0.8), breaks=seq(0, 0.8,by=0.1)) + ggtitle("all points") +
stat_smooth()
all.points.test <- rbind(site330.fall, site330.spring, site330.winter, site345.fall, site345.spring, site345.winter, site364.fall, site364.spring, site364.winter, site370.fall, site370.spring, site370.winter, site372.fall, site372.winter, site372.spring, site378.fall, site378.winter)
all.points.test.plot = ggplot(all.points.test, aes(x=as.numeric(NEAR_DIST_nautical), y=as.numeric(BCD)))
all.points.test.plot + geom_point () +theme_classic () +  scale_y_continuous(name="Bray Curtis Dissimilarity", limits=c(0, 1), breaks=seq(0, 1, by=0.05)) + scale_x_continuous(name = "Distance (nautical miles)", limits=c(0, 0.8), breaks=seq(0, 0.8,by=0.1)) + ggtitle("all points") +
stat_smooth()
all.points.test <- rbind(site330.fall, site330.winter, site345.spring, site364.fall, site364.spring, site364.winter, site370.winter, site372.winter)
all.points.test.plot = ggplot(all.points.test, aes(x=as.numeric(NEAR_DIST_nautical), y=as.numeric(BCD)))
all.points.test.plot + geom_point () +theme_classic () +  scale_y_continuous(name="Bray Curtis Dissimilarity", limits=c(0, 1), breaks=seq(0, 1, by=0.05)) + scale_x_continuous(name = "Distance (nautical miles)", limits=c(0, 0.8), breaks=seq(0, 0.8,by=0.1)) + ggtitle("all points") +
stat_smooth()
```{r working_dir}
setwd("C:/Users/rclairer/Dropbox (Paxton)/Paxton Team Folder/CRFL - Artificial Reefs/Buffer_Zone/analysis_buffer-zone")
```
```{r setup}
opts_chunk$set(echo = FALSE)
invisible(sapply(list.files(path = "R", pattern = "R$", full.names = TRUE), source)) # find functions and other dependencies in .R files
```
```{r get_data}
### FISH DATA ### --------------------------------------------------------------
detach("package:plyr", unload=TRUE)
library(dplyr)
library(lubridate)
library(reshape2)
fish_data <- read.csv ("Fish/4_clean_data/fish_clean_data_output_new10.csv") #without 342 (version of new2, size bins that hayley changed)
fish_meta <- combine_data_meta (data = fish_data,
file_meta = "Metadata/Fish/Fish_Codes_CRFL-AR.csv",
merge_by = "Species_Code")
fish_biom<-make_fish_biomass_col(data = fish_meta)
#fish_subset <- subset_data (data = fish_biom,
#sub_cat = "Pelagic.Demersal", #sub_cat = "Snapper.Grouper",
#sub_val = "Demersal") # YES for yes
## make fish abundance matrix
fish_biom -> data
data$group <- data[,"Species_Code"] # change to family or function_group as needed
#data$group <- data[,"Family"]
#data$group <- data[,"Functional_Group"]
#data$group <- data[,"Family"] #### FAMILY AND FUNCTIONAL GROUP DON"T WORK AS IS BECAUSE THERE ARE FISH WITHOUT FAMILIES AND FUNCTIONAL GROUPS MATCHING THEM...NEEDS FIXING"
new2 <- data %>% group_by(group, ID, Site, Subsite, Date, Transect_Type, Sampling_Period, Transect_Number) %>% summarise(data_abund = sum(Abundance))
new3 <- dcast(new2, ID + Site + Subsite + Date + Transect_Type + Sampling_Period + Transect_Number ~ group)
#new2 <- data %>% group_by(group, ID, Site, Subsite, Date, Transect_Type, Sampling_Period, Transect_Number, Structure_Present, Radiating_Structure) %>% summarise(data_abund = sum(Abundance))
#new3 <- dcast(new2, ID + Site + Subsite + Date + Transect_Type + Sampling_Period + Transect_Number + Structure_Present + Radiating_Structure ~ group)
new3[is.na(new3)]<-0
new4 = new3[rowSums(new3[,8:ncol(new3)]) !=0,] # remove rows where there were no fish on the transect - need this for species, family, and functional group levels
fish_abund_matrix <- new4
# fish_abund_matrix <- calc_fish_abund_matrix (data = fish_biom,
#                                       #tax_level = "Species_Code")
#                                       #tax_level = "Family")
#
# fish_biom_matrix <- calc_fish_biom_matrix (data = fish_biom,
#                                            #tax_level = "Species_Code")
#                                            #tax_level = "Family")
#                                           tax_level = "Functional_Group")
# If at species level, bring meta data back in --> can't do if in wide format obviously!
#library(plyr)
#fish_abund <- rename(fish_abund, c("group"="Species_Code"))
#fish_abund <- combine_data_meta(data = fish_abund,
#file_meta = "Metadata/Fish/Fish_Codes.csv",
#merge_by = "Species_Code")
fish <- fish_abund_matrix # select either abundance or biomass matrix
#fish <- remove_rare_species (data = fish) # remove rare species if desired
#rm(fish_data, fish_meta, fish_biom, fish_subset, fish_abund_matrix, fish_biom_matrix) # remove dataframes
### COMPLEXITY DATA ### -------------------------------------------------------
comp <-read.table("Complexity/3_Clean_Data/comp_site_change.csv", header=T, sep=',')
### TEMPEATURE DATA ### -------------------------------------------------------
temp <-read.table("Temperature/3_Clean_Data/temp_site_change.csv", header=T, sep=',')
### SITES METADATA ### ------------------------------------------------------------
sites <-read.table("Metadata/Sites/CRFL-AR_SITES_Master_2016-06-30_new.csv", header=T, sep=',')
### MERGE DATA ### ------------------------------------------------------------
library(plyr)
join1 <- join(fish, temp, by = c("Site", "Subsite", "Date", "Transect_Type","Transect_Number"))
join2 <- join(join1, comp, by = c("Site", "Subsite", "Date", "Transect_Type","Transect_Number"))
join3 <- join(join2, sites, by = c("Site", "Subsite"))
#join4 <- cbind(join3[,1:8], join3[,91:114], join3[,9:90]) #FOR SPECIES crude way of rearranging so that columns are in decent order; it duplicates ID and names it ID.1 for the duplicate so delete that column later on
#join4 <- cbind(join3[,1:9], join3[,37:60], join3[,10:36]) #FOR FAMILY
#join4 <- cbind(join3[,1:9], join3[,17:40], join3[,10:16]) #FOR FUNCTIONAL GROUP
# new ones
join4 <- cbind(join3[,1:7], join3[,88:111], join3[,8:87]) # species
#join4 <- cbind(join3[,1:7], join3[,40:ncol(join3)], join3[,8:39]) # family
#join4 <- cbind(join3[,1:7], join3[,16:ncol(join3)], join3[8:15]) #Functional group
join5 <- join4[,-c(8, 12)] # FOR SPECIES
#join5 <- join4[,-c(8,12)] # FOR FAMILY
#join5 <- join4[,-c(8,12)] # FOR FUNCTIONAL GROUP
data <- join5
#rm(list= ls()[!(ls() %in% c('data'))]) # removes everything except selected data frame(s)
## Filter data if necessary ## -------------------------------
#data <- filter(data, Reef_type == "Natural")
#data <- filter(data, Reef_type == "Artificial")
#data <- filter(data, Depth_general == "Shallow")
# data <- filter(data, Depth_general == "Shallow")
# data <- filter(data, Depth_general == "Deep")
#data <- filter(data, Reef_type == "Natural", Depth_general == "Intermediate")
env.end<- 29 #FOR SPECEIS
sp.start<-30 #FOR SPECIES
#env.end <- 29 #FOR FAMILY
#sp.start <- 30 #FOR FAMILY
#env.end <- 29 #FOR FUNCTIONAL GROUP
#sp.start <-30 #FOR FUNCTIONAL GROUP
# preserve biomass data for plotting
#biom_data<-merge(merge.2, fish_biom_matrix)
#biom_data <- filter(biom_data, Reef_type == "Artificial")
### REMOVE OUTLIER 200LE on 2014-07-01
#biom_data <- biom_data[-8,]
#biom_data <- biom_data[,sp.start:ncol(biom_data)]
env_data <- data[,1:env.end]
species.data<-data[,sp.start:ncol(data)] # fish data
species.orig<-species.data # fish data, no transform
#species.data <- transform_data (data = species.data, transform_type = "square_root")
species.data <- transform_data (data = species.data, transform_type = "cube_root")
#species.data <- transform_data (data = species.data, transform_type = "pres_abs")
#we need to look at this with Avery
```
library(vegan)
set.seed(318)
species.metaMDS <- metaMDS(species.data, distance = "bray", k=2, trymax = 1000, autotransform = FALSE)
stressplot(species.metaMDS) # Shepard plot
species.metaMDS$stress # stress value
plot(species.metaMDS) # rough plot
text(species.metaMDS$species[,1:2],rownames(species.metaMDS$species),cex=0.8,col="red") # add species labels to the plot (weighted averages)
scores <- species.metaMDS$points # scores
species.nms <- cbind(scores, env_data) # datset with scores and env data
species.wa <- data.frame(species.metaMDS$species)
species.wa <- cbind(row.names(species.wa), species.wa)
library(plyr)
species.wa <- rename(species.wa, c("row.names(species.wa)"="species_code"))
stress <- species.metaMDS$stress # save stress value
nms.xod1 <- dist(species.nms[,1]) # pearson correlation
nms.xod2 <- dist(species.nms[,1:2]) # pearson correlation
r1<-cor(species.bcd,nms.xod1)
r2.1<-r1^2; r2.1
# axis 2 is 2-D minus 1-D solution:
r2<-cor(species.bcd,nms.xod2)
r2.2<-r2^2;
r2.2<-r2.2-r2.1
View(species.data)
```{r working_dir}
setwd("C:/Users/rclairer/Dropbox (Paxton)/Paxton Team Folder/CRFL - Artificial Reefs/Buffer_Zone/analysis_buffer-zone")
```
```{r setup}
opts_chunk$set(echo = FALSE)
invisible(sapply(list.files(path = "R", pattern = "R$", full.names = TRUE), source)) # find functions and other dependencies in .R files
```
```{r get_data}
### FISH DATA ### --------------------------------------------------------------
detach("package:plyr", unload=TRUE)
library(dplyr)
library(lubridate)
library(reshape2)
fish_data <- read.csv ("Fish/4_clean_data/fish_clean_data_output_new10.csv") #without 342 (version of new2, size bins that hayley changed)
fish_meta <- combine_data_meta (data = fish_data,
file_meta = "Metadata/Fish/Fish_Codes_CRFL-AR.csv",
merge_by = "Species_Code")
fish_biom<-make_fish_biomass_col(data = fish_meta)
#fish_subset <- subset_data (data = fish_biom,
#sub_cat = "Pelagic.Demersal", #sub_cat = "Snapper.Grouper",
#sub_val = "Demersal") # YES for yes
## make fish abundance matrix
fish_biom -> data
data$group <- data[,"Species_Code"] # change to family or function_group as needed
#data$group <- data[,"Family"]
#data$group <- data[,"Functional_Group"]
#data$group <- data[,"Family"] #### FAMILY AND FUNCTIONAL GROUP DON"T WORK AS IS BECAUSE THERE ARE FISH WITHOUT FAMILIES AND FUNCTIONAL GROUPS MATCHING THEM...NEEDS FIXING"
new2 <- data %>% group_by(group, ID, Site, Subsite, Date, Transect_Type, Sampling_Period, Transect_Number) %>% summarise(data_abund = sum(Abundance))
new3 <- dcast(new2, ID + Site + Subsite + Date + Transect_Type + Sampling_Period + Transect_Number ~ group)
#new2 <- data %>% group_by(group, ID, Site, Subsite, Date, Transect_Type, Sampling_Period, Transect_Number, Structure_Present, Radiating_Structure) %>% summarise(data_abund = sum(Abundance))
#new3 <- dcast(new2, ID + Site + Subsite + Date + Transect_Type + Sampling_Period + Transect_Number + Structure_Present + Radiating_Structure ~ group)
new3[is.na(new3)]<-0
new4 = new3[rowSums(new3[,8:ncol(new3)]) !=0,] # remove rows where there were no fish on the transect - need this for species, family, and functional group levels
fish_abund_matrix <- new4
# fish_abund_matrix <- calc_fish_abund_matrix (data = fish_biom,
#                                       #tax_level = "Species_Code")
#                                       #tax_level = "Family")
#
# fish_biom_matrix <- calc_fish_biom_matrix (data = fish_biom,
#                                            #tax_level = "Species_Code")
#                                            #tax_level = "Family")
#                                           tax_level = "Functional_Group")
# If at species level, bring meta data back in --> can't do if in wide format obviously!
#library(plyr)
#fish_abund <- rename(fish_abund, c("group"="Species_Code"))
#fish_abund <- combine_data_meta(data = fish_abund,
#file_meta = "Metadata/Fish/Fish_Codes.csv",
#merge_by = "Species_Code")
fish <- fish_abund_matrix # select either abundance or biomass matrix
#fish <- remove_rare_species (data = fish) # remove rare species if desired
#rm(fish_data, fish_meta, fish_biom, fish_subset, fish_abund_matrix, fish_biom_matrix) # remove dataframes
### COMPLEXITY DATA ### -------------------------------------------------------
comp <-read.table("Complexity/3_Clean_Data/comp_site_change.csv", header=T, sep=',')
### TEMPEATURE DATA ### -------------------------------------------------------
temp <-read.table("Temperature/3_Clean_Data/temp_site_change.csv", header=T, sep=',')
### SITES METADATA ### ------------------------------------------------------------
sites <-read.table("Metadata/Sites/CRFL-AR_SITES_Master_2016-06-30_new.csv", header=T, sep=',')
### MERGE DATA ### ------------------------------------------------------------
library(plyr)
join1 <- join(fish, temp, by = c("Site", "Subsite", "Date", "Transect_Type","Transect_Number"))
join2 <- join(join1, comp, by = c("Site", "Subsite", "Date", "Transect_Type","Transect_Number"))
join3 <- join(join2, sites, by = c("Site", "Subsite"))
#join4 <- cbind(join3[,1:8], join3[,91:114], join3[,9:90]) #FOR SPECIES crude way of rearranging so that columns are in decent order; it duplicates ID and names it ID.1 for the duplicate so delete that column later on
#join4 <- cbind(join3[,1:9], join3[,37:60], join3[,10:36]) #FOR FAMILY
#join4 <- cbind(join3[,1:9], join3[,17:40], join3[,10:16]) #FOR FUNCTIONAL GROUP
# new ones
join4 <- cbind(join3[,1:7], join3[,88:111], join3[,8:87]) # species
#join4 <- cbind(join3[,1:7], join3[,40:ncol(join3)], join3[,8:39]) # family
#join4 <- cbind(join3[,1:7], join3[,16:ncol(join3)], join3[8:15]) #Functional group
join5 <- join4[,-c(8, 12)] # FOR SPECIES
#join5 <- join4[,-c(8,12)] # FOR FAMILY
#join5 <- join4[,-c(8,12)] # FOR FUNCTIONAL GROUP
data <- join5
#rm(list= ls()[!(ls() %in% c('data'))]) # removes everything except selected data frame(s)
## Filter data if necessary ## -------------------------------
#data <- filter(data, Reef_type == "Natural")
#data <- filter(data, Reef_type == "Artificial")
#data <- filter(data, Depth_general == "Shallow")
# data <- filter(data, Depth_general == "Shallow")
# data <- filter(data, Depth_general == "Deep")
#data <- filter(data, Reef_type == "Natural", Depth_general == "Intermediate")
env.end<- 29 #FOR SPECEIS
sp.start<-30 #FOR SPECIES
#env.end <- 29 #FOR FAMILY
#sp.start <- 30 #FOR FAMILY
#env.end <- 29 #FOR FUNCTIONAL GROUP
#sp.start <-30 #FOR FUNCTIONAL GROUP
# preserve biomass data for plotting
#biom_data<-merge(merge.2, fish_biom_matrix)
#biom_data <- filter(biom_data, Reef_type == "Artificial")
### REMOVE OUTLIER 200LE on 2014-07-01
#biom_data <- biom_data[-8,]
#biom_data <- biom_data[,sp.start:ncol(biom_data)]
env_data <- data[,1:env.end]
species.data<-data[,sp.start:ncol(data)] # fish data
species.orig<-species.data # fish data, no transform
#species.data <- transform_data (data = species.data, transform_type = "square_root")
species.data <- transform_data (data = species.data, transform_type = "cube_root")
#species.data <- transform_data (data = species.data, transform_type = "pres_abs")
#we need to look at this with Avery
```
library(vegan)
set.seed(318)
species.metaMDS <- metaMDS(species.data, distance = "bray", k=2, trymax = 1000, autotransform = FALSE)
View(species.data)
species.metaMDS <- metaMDS(species.data, distance = "bray", k=3, trymax = 1000, autotransform = FALSE)
species.metaMDS <- metaMDS(species.orig, distance = "bray", k=2, trymax = 1000, autotransform = FALSE)
library(vegan)
set.seed(318)
species.metaMDS <- metaMDS(species.data, distance = "bray", k=2, trymax = 1000, autotransform = FALSE)
stressplot(species.metaMDS) # Shepard plot
species.metaMDS$stress # stress value
plot(species.metaMDS) # rough plot
text(species.metaMDS$species[,1:2],rownames(species.metaMDS$species),cex=0.8,col="red") # add
View(species.data)
```{r working_dir}
setwd("C:/Users/rclairer/Dropbox (Paxton)/Paxton Team Folder/CRFL - Artificial Reefs/Buffer_Zone/analysis_buffer-zone")
```
```{r setup}
opts_chunk$set(echo = FALSE)
invisible(sapply(list.files(path = "R", pattern = "R$", full.names = TRUE), source)) # find functions and other dependencies in .R files
```
```{r get_data}
### FISH DATA ### --------------------------------------------------------------
detach("package:plyr", unload=TRUE)
library(dplyr)
library(lubridate)
library(reshape2)
fish_data <- read.csv ("Fish/4_clean_data/fish_clean_data_output_structure.csv")
fish_data_structure <- filter(fish_data, Structure_Present == "Yes")
fish_data_no <- filter(fish_data, Structure_Present != "Yes")
fish_data_no$Structure_Present <- "No"
fish_data_both <- rbind(fish_data_structure, fish_data_no)
fish_meta_both <- combine_data_meta (data = fish_data_both,
file_meta = "Metadata/Fish/Fish_Codes_CRFL-AR.csv",
merge_by = "Species_Code")
fish_meta_both <- filter(fish_meta_both, Pelagic.Demersal == "Demersal")
fish_meta_both <- filter(fish_meta_both, Water_Col_Position != "R_S_W", Water_Col_Position != "S_W", Water_Col_Position != "W")
fish_biom_both<-make_fish_biomass_col(data = fish_meta_both)
fish_meta_structure <- combine_data_meta (data = fish_data_structure,
file_meta = "Metadata/Fish/Fish_Codes_CRFL-AR.csv",
merge_by = "Species_Code")
fish_meta_structure <- filter(fish_meta_structure, Pelagic.Demersal == "Demersal")
fish_meta_structure <- filter(fish_meta_structure, Water_Col_Position != "R_S_W", Water_Col_Position != "S_W", Water_Col_Position != "W")
fish_meta_no <- combine_data_meta (data = fish_data_no,
file_meta = "Metadata/Fish/Fish_Codes_CRFL-AR.csv",
merge_by = "Species_Code")
fish_meta_no <- filter(fish_meta_no, Pelagic.Demersal == "Demersal")
#fish_meta_no <- filter(fish_meta_no, Water_Col_Position == "R")
fish_meta_no<-filter(fish_meta_no, Water_Col_Position != "R_S_W", Water_Col_Position != "S_W", Water_Col_Position != "W")
fish_biom_structure<-make_fish_biomass_col(data = fish_meta_structure)
fish_biom_no<-make_fish_biomass_col(data = fish_meta_no)
####################################################################
#fish_subset <- subset_data (data = fish_biom,
#sub_cat = "Pelagic.Demersal", #sub_cat = "Snapper.Grouper",
#sub_val = "Demersal") # YES for yes
## make fish abundance matrix
#fish_biom -> data
#data$group <- data[,"Species_Code"] # change to family or function_group as needed
#data$group <- data[,"Family"]
#data$group <- data[,"Functional_Group"]
#data$group <- data[,"Family"] #### FAMILY AND FUNCTIONAL GROUP DON"T WORK AS IS BECAUSE THERE ARE FISH WITHOUT FAMILIES AND FUNCTIONAL GROUPS MATCHING THEM...NEEDS FIXING"
#new2 <- data %>% group_by(group, ID, Site, Subsite, Date, Transect_Type, Sampling_Period, Transect_Number) %>% summarise(data_abund = sum(Abundance))
#new3 <- dcast(new2, ID + Site + Subsite + Date + Transect_Type + Sampling_Period + Transect_Number ~ group)
#hi2 <- data %>% group_by(group, ID, Site, Subsite, Date, Transect_Type, Sampling_Period, Transect_Number, Structure_Present, Radiating_Structure) %>% summarise(data_abund = sum(Abundance))
#hi3 <- dcast(new2, ID + Site + Subsite + Date + Transect_Type + Sampling_Period + Transect_Number + Structure_Present + Radiating_Structure ~ group)
#new3[is.na(new3)]<-0
#new4 = new3[rowSums(new3[,8:ncol(new3)]) !=0,] # remove rows where there were no fish on the transect - need this for species, family, and functional group levels
#fish_abund_matrix <- new4
fish_abund_matrix_both <- calc_fish_abund_matrix (data = fish_biom_both,
tax_level = "Species_Code")
#                                       #tax_level = "Family")
fish_abund_matrix_structure <- calc_fish_abund_matrix (data = fish_biom_structure,
tax_level = "Species_Code")
#                                       #tax_level = "Family")
fish_abund_matrix_no <- calc_fish_abund_matrix (data = fish_biom_no,
tax_level = "Species_Code")
#                                       #tax_level = "Family")
fish_biom_matrix_both <- calc_fish_biom_matrix (data = fish_biom_both,
tax_level = "Species_Code")
#                                            #tax_level = "Family")
#                                           tax_level = "Functional_Group")
fish_biom_matrix_structure <- calc_fish_biom_matrix (data = fish_biom_structure,
tax_level = "Species_Code")
#                                            #tax_level = "Family")
#                                           tax_level = "Functional_Group")
fish_biom_matrix_no <- calc_fish_biom_matrix (data = fish_biom_no,
tax_level = "Species_Code")
#                                            #tax_level = "Family")
#                                           tax_level = "Functional_Group")
#fish_abund_matrix <- rbind(fish_abund_matrix_structure, fish_abund_matrix_no)
#fish_biom_matrix <- rbind(fish_biom_matrix_structure, fish_biom_matrix_no)
# If at species level, bring meta data back in --> can't do if in wide format obviously!
#library(plyr)
#fish_abund <- rename(fish_abund, c("group"="Species_Code"))
#fish_abund <- combine_data_meta(data = fish_abund,
#file_meta = "Metadata/Fish/Fish_Codes.csv",
#merge_by = "Species_Code")
#fish <- fish_abund_matrix # select either abundance or biomass matrix
#fish <- remove_rare_species (data = fish) # remove rare species if desired
#rm(fish_data, fish_meta, fish_biom, fish_subset, fish_abund_matrix, fish_biom_matrix) # remove dataframes
### COMPLEXITY DATA ### -------------------------------------------------------
#comp <-read.table("Complexity/3_Clean_Data/comp_site_change.csv", header=T, sep=',')
### TEMPEATURE DATA ### -------------------------------------------------------
#temp <-read.table("Temperature/3_Clean_Data/temp_site_change.csv", header=T, sep=',')
### SITES METADATA ### ------------------------------------------------------------
#sites <-read.table("Metadata/Sites/CRFL-AR_SITES_Master_2016-06-30_new.csv", header=T, sep=',')
### MERGE DATA ### ------------------------------------------------------------
#library(plyr)
#join1 <- join(fish, temp, by = c("Site", "Subsite", "Date", "Transect_Type","Transect_Number"))
#join2 <- join(join1, comp, by = c("Site", "Subsite", "Date", "Transect_Type","Transect_Number"))
#join3 <- join(join2, sites, by = c("Site", "Subsite"))
#join4 <- cbind(join3[,1:8], join3[,91:114], join3[,9:90]) #FOR SPECIES crude way of rearranging so that columns are in decent order; it duplicates ID and names it ID.1 for the duplicate so delete that column later on
#join4 <- cbind(join3[,1:9], join3[,37:60], join3[,10:36]) #FOR FAMILY
#join4 <- cbind(join3[,1:9], join3[,17:40], join3[,10:16]) #FOR FUNCTIONAL GROUP
# new ones
#join4 <- cbind(join3[,1:7], join3[,88:111], join3[,8:87]) # species
#join4 <- cbind(join3[,1:7], join3[,40:ncol(join3)], join3[,8:39]) # family
#join4 <- cbind(join3[,1:7], join3[,16:ncol(join3)], join3[8:15]) #Functional group
#join5 <- join4[,-c(8, 12)] # FOR SPECIES
#join5 <- join4[,-c(8,12)] # FOR FAMILY
#join5 <- join4[,-c(8,12)] # FOR FUNCTIONAL GROUP
#data <- join5
#rm(list= ls()[!(ls() %in% c('data'))]) # removes everything except selected data frame(s)
## Filter data if necessary ## -------------------------------
#data <- filter(data, Reef_type == "Natural")
#data <- filter(data, Reef_type == "Artificial")
#data <- filter(data, Depth_general == "Shallow")
# data <- filter(data, Depth_general == "Shallow")
# data <- filter(data, Depth_general == "Deep")
#data <- filter(data, Reef_type == "Natural", Depth_general == "Intermediate")
data <- fish_abund_matrix_both
env.end<- 10 #FOR SPECEIS
sp.start<-11 #FOR SPECIES
#env.end <- 29 #FOR FAMILY
#sp.start <- 30 #FOR FAMILY
#env.end <- 29 #FOR FUNCTIONAL GROUP
#sp.start <-30 #FOR FUNCTIONAL GROUP
# preserve biomass data for plotting
#biom_data<-merge(merge.2, fish_biom_matrix)
#biom_data <- filter(biom_data, Reef_type == "Artificial")
### REMOVE OUTLIER 200LE on 2014-07-01
#biom_data <- biom_data[-8,]
#biom_data <- biom_data[,sp.start:ncol(biom_data)]
env_data <- data[,1:env.end]
species.data<-data[,sp.start:ncol(data)] # fish data
species.orig<-species.data # fish data, no transform
#species.data <- transform_data (data = species.data, transform_type = "square_root")
species.data <- transform_data (data = species.data, transform_type = "cube_root")
#species.data <- transform_data (data = species.data, transform_type = "pres_abs")
```
library(vegan)
set.seed(318)
species.metaMDS <- metaMDS(species.data, distance = "bray", k=2, trymax = 1000, autotransform = FALSE)
species.metaMDS
stressplot(species.metaMDS) # Shepard plot
species.metaMDS$stress # stress value
plot(species.metaMDS) # rough plot
text(species.metaMDS$species[,1:2],rownames(species.metaMDS$species),cex=0.8,col="red") # add species labels to the plot (weighted averages)
scores <- species.metaMDS$points # scores
species.nms <- cbind(scores, env_data) # datset with scores and env data
# weighted averages for species
species.wa <- data.frame(species.metaMDS$species)
species.wa <- cbind(row.names(species.wa), species.wa)
library(plyr)
species.wa <- rename(species.wa, c("row.names(species.wa)"="species_code"))
#added and named the sp code column, the first column w/ sp names is visually but NOT functionally there
stress <- species.metaMDS$stress # save stress value
library(plyr)
species.wa <- rename(species.wa, c("row.names(species.wa)"="species_code"))
#added and named the sp code column, the first column w/ sp names is visually but NOT functionally there
stress <- species.metaMDS$stress # save stress value
nms.xod1 <- dist(species.nms[,1]) # pearson correlation
nms.xod2 <- dist(species.nms[,1:2]) # pearson correlation
r1<-cor(species.bcd,nms.xod1)
r2.1<-r1^2; r2.1
# axis 2 is 2-D minus 1-D solution:
r2<-cor(species.bcd,nms.xod2)
r2.2<-r2^2;
r2.2<-r2.2-r2.1
# now plot it
NMDS = data.frame(MDS1 = species.nms[,1], MDS2 = species.nms[,2]) # data frame to work with
yl<-paste("NMS 2 ", '(', as.character(round(r2.2, digits=2)*100), '%', ')', sep='') # y axis label
xl<-paste("NMS 1 ", '(', as.character(round(r2.1, digits=2)*100), '%', ')', sep='') # x axis label
title<-paste(" ", 'stress = ', as.character(round(stress, digits=2)), '', sep='') # title
