install.packages("vegan")
install.packages("ecodist")
install.packages("plyr")
install.packages("ggplot2")
install.packages("nlme")
install.packages("lme4")
install.packages("reshape2")
install.packages("~/Downloads/mvpart_1.6-2.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/mvpart_1.6-2.tar.gz", repos = NULL, type = "source")
library("mvpart", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:mvpart", unload=TRUE)
install.packages("rmarkdown")
?subset
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(semPlot)
library(AICmodavg)
library("AICcmodavg", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("semPlot", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(agricolae)
library(indicspecies)
citation("indicspecies")
setwd("~/Dropbox (Paxton)/Paxton Team Folder/CRFL - Artificial Reefs/Buffer_Zone/analysis_buffer-zone")
opts_chunk$set(echo = FALSE)
invisible(sapply(list.files(path = "R", pattern = "R$", full.names = TRUE), source)) # find functions and other dependencies in .R files
### FISH DATA ### --------------------------------------------------------------
detach("package:plyr", unload=TRUE)
library(dplyr)
library(lubridate)
library(reshape2)
fish_data <- read.csv ("Fish/4_clean_data/fish_clean_data_output_new10.csv") #without 342 (version of new2, size bins that hayley changed)
fish_meta <- combine_data_meta (data = fish_data,
file_meta = "Metadata/Fish/Fish_Codes_CRFL-AR.csv",
merge_by = "Species_Code")
fish_biom<-make_fish_biomass_col(data = fish_meta)
#fish_subset <- subset_data (data = fish_biom,
#sub_cat = "Pelagic.Demersal", #sub_cat = "Snapper.Grouper",
#sub_val = "Demersal") # YES for yes
## make fish abundance matrix
fish_biom -> data
data$group <- data[,"Species_Code"] # change to family or function_group as needed
#data$group <- data[,"Family"]
#data$group <- data[,"Functional_Group"]
#data$group <- data[,"Family"] #### FAMILY AND FUNCTIONAL GROUP DON"T WORK AS IS BECAUSE THERE ARE FISH WITHOUT FAMILIES AND FUNCTIONAL GROUPS MATCHING THEM...NEEDS FIXING"
new2 <- data %>% group_by(group, ID, Site, Subsite, Date, Transect_Type, Sampling_Period, Transect_Number) %>% summarise(data_abund = sum(Abundance))
new3 <- dcast(new2, ID + Site + Subsite + Date + Transect_Type + Sampling_Period + Transect_Number ~ group)
#new2 <- data %>% group_by(group, ID, Site, Subsite, Date, Transect_Type, Sampling_Period, Transect_Number, Structure_Present, Radiating_Structure) %>% summarise(data_abund = sum(Abundance))
#new3 <- dcast(new2, ID + Site + Subsite + Date + Transect_Type + Sampling_Period + Transect_Number + Structure_Present + Radiating_Structure ~ group)
new3[is.na(new3)]<-0
new4 = new3[rowSums(new3[,8:ncol(new3)]) !=0,] # remove rows where there were no fish on the transect - need this for species, family, and functional group levels
fish_abund_matrix <- new4
# fish_abund_matrix <- calc_fish_abund_matrix (data = fish_biom,
#                                       #tax_level = "Species_Code")
#                                       #tax_level = "Family")
#
# fish_biom_matrix <- calc_fish_biom_matrix (data = fish_biom,
#                                            #tax_level = "Species_Code")
#                                            #tax_level = "Family")
#                                           tax_level = "Functional_Group")
# If at species level, bring meta data back in --> can't do if in wide format obviously!
#library(plyr)
#fish_abund <- rename(fish_abund, c("group"="Species_Code"))
#fish_abund <- combine_data_meta(data = fish_abund,
#file_meta = "Metadata/Fish/Fish_Codes.csv",
#merge_by = "Species_Code")
fish <- fish_abund_matrix # select either abundance or biomass matrix
#fish <- remove_rare_species (data = fish) # remove rare species if desired
#rm(fish_data, fish_meta, fish_biom, fish_subset, fish_abund_matrix, fish_biom_matrix) # remove dataframes
### COMPLEXITY DATA ### -------------------------------------------------------
comp <-read.table("Complexity/3_Clean_Data/comp_site_change.csv", header=T, sep=',')
### TEMPEATURE DATA ### -------------------------------------------------------
temp <-read.table("Temperature/3_Clean_Data/temp_site_change.csv", header=T, sep=',')
### SITES METADATA ### ------------------------------------------------------------
sites <-read.table("Metadata/Sites/CRFL-AR_SITES_Master_2016-06-30_new.csv", header=T, sep=',')
### MERGE DATA ### ------------------------------------------------------------
library(plyr)
join1 <- join(fish, temp, by = c("Site", "Subsite", "Date", "Transect_Type","Transect_Number"))
join2 <- join(join1, comp, by = c("Site", "Subsite", "Date", "Transect_Type","Transect_Number"))
join3 <- join(join2, sites, by = c("Site", "Subsite"))
#join4 <- cbind(join3[,1:8], join3[,91:114], join3[,9:90]) #FOR SPECIES crude way of rearranging so that columns are in decent order; it duplicates ID and names it ID.1 for the duplicate so delete that column later on
#join4 <- cbind(join3[,1:9], join3[,37:60], join3[,10:36]) #FOR FAMILY
#join4 <- cbind(join3[,1:9], join3[,17:40], join3[,10:16]) #FOR FUNCTIONAL GROUP
# new ones
join4 <- cbind(join3[,1:7], join3[,88:111], join3[,8:87]) # species
#join4 <- cbind(join3[,1:7], join3[,40:ncol(join3)], join3[,8:39]) # family
#join4 <- cbind(join3[,1:7], join3[,16:ncol(join3)], join3[8:15]) #Functional group
join5 <- join4[,-c(8, 12)] # FOR SPECIES
#join5 <- join4[,-c(8,12)] # FOR FAMILY
#join5 <- join4[,-c(8,12)] # FOR FUNCTIONAL GROUP
data <- join5
#rm(list= ls()[!(ls() %in% c('data'))]) # removes everything except selected data frame(s)
## Filter data if necessary ## -------------------------------
#data <- filter(data, Reef_type == "Natural")
#data <- filter(data, Reef_type == "Artificial")
#data <- filter(data, Depth_general == "Shallow")
# data <- filter(data, Depth_general == "Shallow")
# data <- filter(data, Depth_general == "Deep")
#data <- filter(data, Reef_type == "Natural", Depth_general == "Intermediate")
env.end<- 29 #FOR SPECEIS
sp.start<-30 #FOR SPECIES
#env.end <- 29 #FOR FAMILY
#sp.start <- 30 #FOR FAMILY
#env.end <- 29 #FOR FUNCTIONAL GROUP
#sp.start <-30 #FOR FUNCTIONAL GROUP
# preserve biomass data for plotting
#biom_data<-merge(merge.2, fish_biom_matrix)
#biom_data <- filter(biom_data, Reef_type == "Artificial")
### REMOVE OUTLIER 200LE on 2014-07-01
#biom_data <- biom_data[-8,]
#biom_data <- biom_data[,sp.start:ncol(biom_data)]
env_data <- data[,1:env.end]
species.data<-data[,sp.start:ncol(data)] # fish data
species.orig<-species.data # fish data, no transform
#species.data <- transform_data (data = species.data, transform_type = "square_root")
species.data <- transform_data (data = species.data, transform_type = "cube_root")
#species.data <- transform_data (data = species.data, transform_type = "pres_abs")
#we need to look at this with Avery
library(vegan)
set.seed(318)
species.metaMDS <- metaMDS(species.data, distance = "bray", k=2, trymax = 1000, autotransform = FALSE)
species.metaMDS <- metaMDS(species.data, distance = "bray", k=2, trymax = 1000, autotransform = FALSE)
library(labdsv)
library(vegan)
set.seed(318)
spdist <- vegdist(species.data, method = 'bray', binary=FALSE, upper=FALSE) #creates bray curtis; from vegan
best1<-bestnmds(spdist, k=1, maxit=50, itr=20) #With one dimension, runs 50iterations to get best stress, repeat 20times and gets the average from those twenty. Stress is in percentages (Avery uses r^2)
best2<-bestnmds(spdist, k=2, maxit=50, itr=20) #same for 2 dimensions,
best3<-bestnmds(spdist, k=3, maxit=50, itr=20) # 3 dim...etc
best4<-bestnmds(spdist, k=4, maxit=50, itr=20)
best5<-bestnmds(spdist, k=5, maxit=50, itr=20)
actualstress<-c(best1$stress, best2$stress, best3$stress, best4$stress, best5$stress)
names(actualstress)<-1:5 #creates a vector of all the numbers from above (best stresses)
actualstress #Visualize the stress (vector)
metaMDS(spdist, k=2, maxit=50, itr=20) #Run nms
library(ecodist)
set.seed (318)
species.bcd<-bcdist(species.data, rmzero=FALSE) # build distance matrix based on bray curtis
species.nms.step <- nmds(species.bcd, nits=10, mindim=1, maxdim=6) # step down procedure to generate multiple ordinations; 6 sets of 10 ranging from 1dims to 6dims
species.nms.stress <- matrix(species.nms.step$stress, nrow=6, byrow=T)
nms.stress.mean <- apply(species.nms.stress, 1, "mean")
nms.stress.min <- apply(species.nms.stress, 1, "min")
nms.stress.max <- apply(species.nms.stress, 1, "max")
nms.stress.min
plot(1:6, nms.stress.mean, type="b", pch=19, lwd=2, xlab="Dimensions", ylim=c(0, 0.7), ylab="Stress")
lines(1:6, nms.stress.min, type="l", lty=2)
lines(1:6, nms.stress.max, type="l", lty=2)
title("NMS Stepdown")
nms2.xod<-dist(species.nms)
plot(nms2.xod,species.bcd,pch="*",xlab="Ordination Distance", ylab="Extended B-C Distance")
abline(0,1,col="red") # put in the 1:1 line (intercept=0, slope=1)
title("Shepard Diagram")
nms.r2.mean <- apply(species.nms.r2, 1, "mean")
nms.r2.min <- apply(species.nms.r2, 1, "min")
nms.r2.max <- apply(species.nms.r2, 1, "max")
# Scree plot with R2
plot(1:6, nms.r2.mean, type="b", pch=19, lwd=2, xlab="Dimensions", ylim=c(0, 1.0), ylab="R-squared")
lines(1:6, nms.r2.min, type="l", lty=2)
lines(1:6, nms.r2.max, type="l", lty=2)
title("NMS Stepdown")
# Final ordination configuration
species.nmds <- nmds(species.bcd,mindim=2,maxdim=2,nits=20) # 20 reps and 2 dimensions
minso<-which.min(species.nmds$stress)
minso # minimum stress ordination number
stress <- min(species.nmds$stress) # minimum stress value
species.nms <- nmds.min(species.nmds) # gives minimum stress and r2 value for best ordination
nms.pca<-princomp(species.nms)
print(nms.pca)
summary(nms.pca) # gives % variation on each axis out of % variance captured in ordination (not out 100%)
species.nms<-nms.pca$scores
colnames(species.nms) <- c("NMS1", "NMS2")
nms2.xod<-dist(species.nms)
plot(nms2.xod,species.bcd,pch="*",xlab="Ordination Distance", ylab="Extended B-C Distance")
abline(0,1,col="red") # put in the 1:1 line (intercept=0, slope=1)
title("Shepard Diagram")
nms2.xod<-dist(species.nms)
title("Shepard Diagram")
nms.xod2 <- dist(species.nms[,1:2]) # pearson correlation
plot(nms2.xod,species.bcd,pch="*",xlab="Ordination Distance", ylab="Extended B-C Distance")
# Print what we need for next steps
# axis 2 is 2-D minus 1-D solution:
r2.2
r2.2<-r2^2;
nms.xod1 <- dist(species.nms[,1]) # pearson correlation
plot(nms2.xod,species.bcd,pch="*",xlab="Ordination Distance", ylab="Extended B-C Distance")
species.nms<-cbind(species.nms, env.data)
species.nmds <- nmds(species.bcd,mindim=2,maxdim=2,nits=20) # 20 reps and 2 dimensions
minso<-which.min(species.nmds$stress)
minso # minimum stress ordination number
stress <- min(species.nmds$stress) # minimum stress value
species.nms <- nmds.min(species.nmds) # gives minimum stress and r2 value for best ordination
nms.pca<-princomp(species.nms)
print(nms.pca)
summary(nms.pca) # gives % variation on each axis out of % variance captured in ordination (not out 100%)
species.nms<-nms.pca$scores
colnames(species.nms) <- c("NMS1", "NMS2")
# Shepard diagram to check if linear
nms2.xod<-dist(species.nms)
plot(nms2.xod,species.bcd,pch="*",xlab="Ordination Distance", ylab="Extended B-C Distance")
abline(0,1,col="red") # put in the 1:1 line (intercept=0, slope=1)
title("Shepard Diagram")
nms.xod1 <- dist(species.nms[,1]) # pearson correlation
nms.xod2 <- dist(species.nms[,1:2]) # pearson correlation
r1<-cor(species.bcd,nms.xod1)
r2.1<-r1^2; r2.1
# axis 2 is 2-D minus 1-D solution:
r2.2<-r2^2;
species.nms<-cbind(species.nms, env.data)
r2.1
r2.2<-r2.2-r2.1
nms.xod1 <- dist(species.nms[,1]) # pearson correlation
r2<-cor(species.bcd,nms.xod2)
r2.2
species.nms<-cbind(species.nms, env_data)
r1<-cor(species.bcd,nms.xod1)
r2.1<-r1^2; r2.1
r2.1
r2<-cor(species.bcd,nms.xod2)
r2.2<-r2^2;
r2.2<-r2.2-r2.1
r2.2
r2.2
r2.1
stress
NMDS = data.frame(MDS1 = species.nms[,1], MDS2 = species.nms[,2]) # data frame to work with
yl<-paste("NMS 2 ", '(', as.character(round(r2.2, digits=2)*100), '%', ')', sep='') # y axis label
xl<-paste("NMS 1 ", '(', as.character(round(r2.1, digits=2)*100), '%', ')', sep='') # x axis label
title<-paste(" ", 'stress = ', as.character(round(stress, digits=2)), '', sep='') # title
library(colorspace)
ggplot()+
coord_equal()+ # axes sizes equal
theme_bw()+ # basic theme
geom_point(data = NMDS,
;alkdfj
<<<
;lksdjf
NMDS = data.frame(MDS1 = species.nms[,1], MDS2 = species.nms[,2]) # data frame to work with
yl<-paste("NMS 2 ", '(', as.character(round(r2.2, digits=2)*100), '%', ')', sep='') # y axis label
xl<-paste("NMS 1 ", '(', as.character(round(r2.1, digits=2)*100), '%', ')', sep='') # x axis label
title<-paste(" ", 'stress = ', as.character(round(stress, digits=2)), '', sep='') # title
library(colorspace)
ggplot()+
coord_equal()+ # axes sizes equal
theme_bw()+ # basic theme
geom_point(data = NMDS,
aes(x = MDS1, y = MDS2, color = as.factor(species.nms$Transect_Number), shape=as.factor(species.nms$Transect_Number)),
size=5) + # adds sample points
geom_text(data=species.wa,
aes(x=species.wa[,2],y=species.wa[,3],label=species_code),
alpha=0.9, # adds weighted averages for species
position=position_jitter(width=0.1,height=0.2))+
stat_ellipse(data = NMDS,
aes(x=MDS1,y=MDS2,colour=as.factor(env_data$Transect_Number)),
level = 0.50, linetype=2, size =1) + # adds ellipses for 95% confidence intervals
scale_y_continuous(name=yl) + # names y axis
scale_x_continuous(name=xl) + # names x axis
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.text=element_text(color="black", size=16),
legend.title=element_text(color="black", size = 16),
legend.position="bottom") +
#scale_colour_manual(name = "Reef Type",
#                    values = c("Artificial" = "indianred2", "Natural" = "darkturquoise"))+
#scale_shape_manual (name="Reef Type",
#                    values = c("Artificial" = 17, "Natural" = 16))+
ggtitle(title)
library(ggplot2)
NMDS = data.frame(MDS1 = species.nms[,1], MDS2 = species.nms[,2]) # data frame to work with
yl<-paste("NMS 2 ", '(', as.character(round(r2.2, digits=2)*100), '%', ')', sep='') # y axis label
xl<-paste("NMS 1 ", '(', as.character(round(r2.1, digits=2)*100), '%', ')', sep='') # x axis label
title<-paste(" ", 'stress = ', as.character(round(stress, digits=2)), '', sep='') # title
library(colorspace)
ggplot()+
coord_equal()+ # axes sizes equal
theme_bw()+ # basic theme
geom_point(data = NMDS,
aes(x = MDS1, y = MDS2, color = as.factor(species.nms$Transect_Number), shape=as.factor(species.nms$Transect_Number)),
size=5) + # adds sample points
geom_text(data=species.wa,
aes(x=species.wa[,2],y=species.wa[,3],label=species_code),
alpha=0.9, # adds weighted averages for species
position=position_jitter(width=0.1,height=0.2))+
stat_ellipse(data = NMDS,
aes(x=MDS1,y=MDS2,colour=as.factor(env_data$Transect_Number)),
level = 0.50, linetype=2, size =1) + # adds ellipses for 95% confidence intervals
scale_y_continuous(name=yl) + # names y axis
scale_x_continuous(name=xl) + # names x axis
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.text=element_text(color="black", size=16),
legend.title=element_text(color="black", size = 16),
legend.position="bottom") +
#scale_colour_manual(name = "Reef Type",
#                    values = c("Artificial" = "indianred2", "Natural" = "darkturquoise"))+
#scale_shape_manual (name="Reef Type",
#                    values = c("Artificial" = 17, "Natural" = 16))+
ggtitle(title)
NMDS = data.frame(MDS1 = species.nms[,1], MDS2 = species.nms[,2]) # data frame to work with
yl<-paste("NMS 2 ", '(', as.character(round(r2.2, digits=2)*100), '%', ')', sep='') # y axis label
xl<-paste("NMS 1 ", '(', as.character(round(r2.1, digits=2)*100), '%', ')', sep='') # x axis label
title<-paste(" ", 'stress = ', as.character(round(stress, digits=2)), '', sep='') # title
library(colorspace)
ggplot()+
coord_equal()+ # axes sizes equal
theme_bw()+ # basic theme
geom_point(data = NMDS,
aes(x = MDS1, y = MDS2, color = as.factor(species.nms$Transect_Number), shape=as.factor(species.nms$Transect_Number)),
size=5) + # adds sample points
#geom_text(data=species.wa,
#          aes(x=species.wa[,2],y=species.wa[,3],label=species_code),
#          alpha=0.9, # adds weighted averages for species
#          position=position_jitter(width=0.1,height=0.2))+
stat_ellipse(data = NMDS,
aes(x=MDS1,y=MDS2,colour=as.factor(env_data$Transect_Number)),
level = 0.50, linetype=2, size =1) + # adds ellipses for 95% confidence intervals
scale_y_continuous(name=yl) + # names y axis
scale_x_continuous(name=xl) + # names x axis
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.text=element_text(color="black", size=16),
legend.title=element_text(color="black", size = 16),
legend.position="bottom") +
#scale_colour_manual(name = "Reef Type",
#                    values = c("Artificial" = "indianred2", "Natural" = "darkturquoise"))+
#scale_shape_manual (name="Reef Type",
#                    values = c("Artificial" = 17, "Natural" = 16))+
ggtitle(title)
