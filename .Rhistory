plot.all + geom_point (aes(colour= Sampling_Period)) +theme_classic () +  scale_y_continuous(name="Bray Curtis Dissimilarity", limits=c(0, 1), breaks=seq(0, 1, by=0.05)) + scale_x_continuous(name = "Distance (nautical miles)", limits=c(0, 0.7), breaks=seq(0, 0.7,by=0.1)) + geom_smooth (aes(colour = Sampling_Period))
plot.all = ggplot(all, aes(x=as.numeric(NEAR_DIST_nautical), y=as.numeric(BCD)))
plot.all + geom_point (aes(colour= Sampling_Period)) +theme_classic () +  scale_y_continuous(name="Bray Curtis Dissimilarity", limits=c(0, 1), breaks=seq(0, 1, by=0.05)) + scale_x_continuous(name = "Distance (nautical miles)", limits=c(0, 60), breaks=seq(0, 60,by=10)) + geom_smooth (aes(colour = Sampling_Period))
View(all)
```{r working_dir}
setwd("C:/Users/rclairer/Dropbox (Paxton)/Paxton Team Folder/CRFL - Artificial Reefs/Buffer_Zone/analysis_buffer-zone")
```
```{r setup}
opts_chunk$set(echo = FALSE)
invisible(sapply(list.files(path = "R", pattern = "R$", full.names = TRUE), source)) # find functions and other dependencies in .R files
```
```{r get_data}
### FISH DATA ### --------------------------------------------------------------
detach("package:plyr", unload=TRUE)
library(dplyr)
library(lubridate)
library(reshape2)
fish_data <- read.csv ("Fish/4_clean_data/fish_clean_data_output_new10.csv") #without 342 (version of new2, size bins that hayley changed)
fish_meta <- combine_data_meta (data = fish_data,
file_meta = "Metadata/Fish/Fish_Codes_CRFL-AR.csv",
merge_by = "Species_Code")
fish_biom<-make_fish_biomass_col(data = fish_meta)
#fish_subset <- subset_data (data = fish_biom,
#sub_cat = "Pelagic.Demersal", #sub_cat = "Snapper.Grouper",
#sub_val = "Demersal") # YES for yes
## make fish abundance matrix
fish_biom -> data
data$group <- data[,"Species_Code"] # change to family or function_group as needed
#data$group <- data[,"Family"]
#data$group <- data[,"Functional_Group"]
#data$group <- data[,"Family"] #### FAMILY AND FUNCTIONAL GROUP DON"T WORK AS IS BECAUSE THERE ARE FISH WITHOUT FAMILIES AND FUNCTIONAL GROUPS MATCHING THEM...NEEDS FIXING"
new2 <- data %>% group_by(group, ID, Site, Subsite, Date, Transect_Type, Sampling_Period, Transect_Number) %>% summarise(data_abund = sum(Abundance))
new3 <- dcast(new2, ID + Site + Subsite + Date + Transect_Type + Sampling_Period + Transect_Number ~ group)
#new2 <- data %>% group_by(group, ID, Site, Subsite, Date, Transect_Type, Sampling_Period, Transect_Number, Structure_Present, Radiating_Structure) %>% summarise(data_abund = sum(Abundance))
#new3 <- dcast(new2, ID + Site + Subsite + Date + Transect_Type + Sampling_Period + Transect_Number + Structure_Present + Radiating_Structure ~ group)
new3[is.na(new3)]<-0
new4 = new3[rowSums(new3[,8:ncol(new3)]) !=0,] # remove rows where there were no fish on the transect - need this for species, family, and functional group levels
fish_abund_matrix <- new4
# fish_abund_matrix <- calc_fish_abund_matrix (data = fish_biom,
#                                       #tax_level = "Species_Code")
#                                       #tax_level = "Family")
#
# fish_biom_matrix <- calc_fish_biom_matrix (data = fish_biom,
#                                            #tax_level = "Species_Code")
#                                            #tax_level = "Family")
#                                           tax_level = "Functional_Group")
# If at species level, bring meta data back in --> can't do if in wide format obviously!
#library(plyr)
#fish_abund <- rename(fish_abund, c("group"="Species_Code"))
#fish_abund <- combine_data_meta(data = fish_abund,
#file_meta = "Metadata/Fish/Fish_Codes.csv",
#merge_by = "Species_Code")
fish <- fish_abund_matrix # select either abundance or biomass matrix
#fish <- remove_rare_species (data = fish) # remove rare species if desired
#rm(fish_data, fish_meta, fish_biom, fish_subset, fish_abund_matrix, fish_biom_matrix) # remove dataframes
### COMPLEXITY DATA ### -------------------------------------------------------
comp <-read.table("Complexity/3_Clean_Data/comp_site_change.csv", header=T, sep=',')
### TEMPEATURE DATA ### -------------------------------------------------------
temp <-read.table("Temperature/3_Clean_Data/temp_site_change.csv", header=T, sep=',')
### SITES METADATA ### ------------------------------------------------------------
sites <-read.table("Metadata/Sites/CRFL-AR_SITES_Master_2016-06-30_new.csv", header=T, sep=',')
### MERGE DATA ### ------------------------------------------------------------
library(plyr)
join1 <- join(fish, temp, by = c("Site", "Subsite", "Date", "Transect_Type","Transect_Number"))
join2 <- join(join1, comp, by = c("Site", "Subsite", "Date", "Transect_Type","Transect_Number"))
join3 <- join(join2, sites, by = c("Site", "Subsite"))
#join4 <- cbind(join3[,1:8], join3[,91:114], join3[,9:90]) #FOR SPECIES crude way of rearranging so that columns are in decent order; it duplicates ID and names it ID.1 for the duplicate so delete that column later on
#join4 <- cbind(join3[,1:9], join3[,37:60], join3[,10:36]) #FOR FAMILY
#join4 <- cbind(join3[,1:9], join3[,17:40], join3[,10:16]) #FOR FUNCTIONAL GROUP
# new ones
join4 <- cbind(join3[,1:7], join3[,88:111], join3[,8:87]) # species
#join4 <- cbind(join3[,1:7], join3[,40:ncol(join3)], join3[,8:39]) # family
#join4 <- cbind(join3[,1:7], join3[,16:ncol(join3)], join3[8:15]) #Functional group
join5 <- join4[,-c(8, 12)] # FOR SPECIES
#join5 <- join4[,-c(8,12)] # FOR FAMILY
#join5 <- join4[,-c(8,12)] # FOR FUNCTIONAL GROUP
data <- join5
#rm(list= ls()[!(ls() %in% c('data'))]) # removes everything except selected data frame(s)
## Filter data if necessary ## -------------------------------
#data <- filter(data, Reef_type == "Natural")
#data <- filter(data, Reef_type == "Artificial")
#data <- filter(data, Depth_general == "Shallow")
# data <- filter(data, Depth_general == "Shallow")
# data <- filter(data, Depth_general == "Deep")
#data <- filter(data, Reef_type == "Natural", Depth_general == "Intermediate")
env.end<- 29 #FOR SPECEIS
sp.start<-30 #FOR SPECIES
#env.end <- 29 #FOR FAMILY
#sp.start <- 30 #FOR FAMILY
#env.end <- 29 #FOR FUNCTIONAL GROUP
#sp.start <-30 #FOR FUNCTIONAL GROUP
# preserve biomass data for plotting
#biom_data<-merge(merge.2, fish_biom_matrix)
#biom_data <- filter(biom_data, Reef_type == "Artificial")
### REMOVE OUTLIER 200LE on 2014-07-01
#biom_data <- biom_data[-8,]
#biom_data <- biom_data[,sp.start:ncol(biom_data)]
env_data <- data[,1:env.end]
species.data<-data[,sp.start:ncol(data)] # fish data
species.orig<-species.data # fish data, no transform
#species.data <- transform_data (data = species.data, transform_type = "square_root")
species.data <- transform_data (data = species.data, transform_type = "cube_root")
#species.data <- transform_data (data = species.data, transform_type = "pres_abs")
#we need to look at this with Avery
```
``` {r BCD_function_prep}
library(ecodist)
library(vegan)
library(ggplot2)
structural.data <- filter(data, Transect_Type == "Structural")
fall.structural.data <- filter(structural.data, Sampling_Period == "Fall")
winter.structural.data <- filter(structural.data, Sampling_Period == "Winter")
spring.structural.data <- filter(structural.data, Sampling_Period == "Spring")
fall.MHC.data <- filter(fall.structural.data, Site == "330" | Site == "345")
fall.wil.data <- filter(fall.structural.data, Site == "364"| Site == "370" | Site == "372" | Site == "378")
winter.MHC.data <- filter(winter.structural.data, Site == "330" | Site == "345")
winter.wil.data <- filter(winter.structural.data, Site == "364"| Site == "370" | Site == "372" | Site == "378")
spring.MHC.data <- filter(spring.structural.data, Site == "330" | Site == "345")
spring.wil.data <- filter(spring.structural.data, Site == "364"| Site == "370" | Site == "372" | Site == "378")
env.end<- 29 #FOR SPECEIS
sp.start<-30 #FOR SPECIES
env_data.structural <- structural.data[,1:env.end]
env_data.structural.fall <- fall.structural.data [,1:env.end]
env_data.structural.winter <- winter.structural.data [,1:env.end]
env_data.structural.spring <- spring.structural.data [,1:env.end]
env_data.fall.MHC <- fall.MHC.data[,1:env.end]
env_data.fall.wil <-fall.wil.data[,1:env.end]
env_data.winter.MHC <-winter.MHC.data[,1:env.end]
env_data.winter.wil <-winter.wil.data[,1:env.end]
env_data.spring.MHC <-spring.MHC.data[,1:env.end]
env_data.spring.wil <-spring.wil.data[,1:env.end]
species.data.structural <-structural.data[,sp.start:ncol(structural.data)] # fish data
species.orig.structural <-species.data.structural # fish data, no transform
species.data.structural.fall <-fall.structural.data[,sp.start:ncol(fall.structural.data)] # fish data
species.orig.structural.fall <-species.data.structural.fall # fish data, no transform
species.data.structural.winter <-winter.structural.data[,sp.start:ncol(winter.structural.data)] # fish data
species.orig.structural.winter <-species.data.structural.winter # fish data, no transform
species.data.structural.spring <-spring.structural.data[,sp.start:ncol(spring.structural.data)] # fish data
species.orig.structural.spring <-species.data.structural.spring # fish data, no transform
species.data.structural.fall.MHC <-fall.MHC.data[,sp.start:ncol(fall.MHC.data)] # fish data
species.orig.structural.fall.MHC <-species.data.structural.fall.MHC # fish data, no transform
species.data.structural.fall.wil <-fall.wil.data[,sp.start:ncol(fall.wil.data)] # fish data
species.orig.structural.fall.wil <-species.data.structural.fall.wil # fish data, no transform
species.data.structural.winter.MHC <-winter.MHC.data[,sp.start:ncol(winter.MHC.data)] # fish data
species.orig.structural.winter.MHC <-species.data.structural.winter.MHC # fish data, no transform
species.data.structural.winter.wil <-winter.wil.data[,sp.start:ncol(winter.wil.data)] # fish data
species.orig.structural.winter.wil <-species.data.structural.winter.wil # fish data, no transform
species.data.structural.spring.MHC <-spring.MHC.data[,sp.start:ncol(spring.MHC.data)] # fish data
species.orig.structural.spring.MHC <-species.data.structural.spring.MHC # fish data, no transform
species.data.structural.spring.wil <-spring.wil.data[,sp.start:ncol(spring.wil.data)] # fish data
species.orig.structural.spring.wil <-species.data.structural.spring.wil # fish data, no transform
species.data.structural <- transform_data (data = species.data.structural, transform_type = "cube_root")
species.data.structural.fall <- transform_data (data = species.data.structural.fall, transform_type = "cube_root")
species.data.structural.winter <- transform_data (data = species.data.structural.winter, transform_type = "cube_root")
species.data.structural.spring <- transform_data (data = species.data.structural.spring, transform_type = "cube_root")
species.data.structural.fall.MHC <-transform_data (data = species.data.structural.fall.MHC, transform_type = "cube_root")
species.data.structural.fall.wil <-transform_data (data = species.data.structural.fall.wil, transform_type = "cube_root")
species.data.structural.winter.MHC <- transform_data (data = species.data.structural.winter.MHC, transform_type = "cube_root")
species.data.structural.winter.wil <- transform_data (data = species.data.structural.winter.wil, transform_type = "cube_root")
species.data.structural.spring.MHC <-transform_data (data = species.data.structural.spring.MHC, transform_type = "cube_root")
species.data.structural.spring.wil <- transform_data (data = species.data.structural.spring.wil, transform_type = "cube_root")
set.seed(318) # for reproducibility
species.bcd<-bcdist(species.data.structural, rmzero=FALSE) # build distance matrix based on bray curtis
species.bcd.fall <-bcdist(species.data.structural.fall, rmzero=FALSE) # build distance matrix based on bray curtis
species.bcd.winter <-bcdist(species.data.structural.winter, rmzero=FALSE) # build distance matrix based on bray curtis
species.bcd.spring <-bcdist(species.data.structural.spring, rmzero=FALSE) # build distance matrix based on bray curtis
bcd.fall.MHC <- bcdist(species.data.structural.fall.MHC, rmzero=FALSE)
bcd.fall.wil <- bcdist(species.data.structural.fall.wil, rmzero=FALSE)
bcd.winter.MHC<- bcdist(species.data.structural.winter.MHC, rmzero=FALSE)
bcd.winter.wil<- bcdist(species.data.structural.winter.wil, rmzero=FALSE)
bcd.spring.MHC<- bcdist(species.data.structural.spring.MHC, rmzero=FALSE)
bcd.spring.wil<- bcdist(species.data.structural.spring.wil, rmzero=FALSE)
species.bcd_df <- as.matrix(species.bcd)
species.bcd_df.fall <- as.matrix(species.bcd.fall)
species.bcd_df.winter <- as.matrix(species.bcd.winter)
species.bcd_df.spring <- as.matrix(species.bcd.spring)
bcd.fall.MHC <-  as.matrix(bcd.fall.MHC)
bcd.fall.wil <- as.matrix(bcd.fall.wil)
bcd.winter.MHC<-  as.matrix(bcd.winter.MHC)
bcd.winter.wil<- as.matrix(bcd.winter.wil)
bcd.spring.MHC<-  as.matrix(bcd.spring.MHC)
bcd.spring.wil<- as.matrix(bcd.spring.wil)
######################################################################################3
distance <- read.csv ("Distance/dive_pts_distance_to_other_dive_pts_ft.csv") #
distance.matrix <- as.matrix(distance[,2:4])
distance.matrix <- as.data.frame(distance.matrix)
distance.codes <-as.matrix(sites[,c(1,2,13)])
distance.codes <- as.data.frame(distance.codes)
library (dplyr)
#for all
half.species.bcd <- matrix(nrow=nrow(species.bcd_df), ncol=nrow(species.bcd_df))
j=1  # j is "outer loop" counter (columns); begin at 1
for (j in 1:nrow(species.bcd_df)) {
i=1  # i is "inner loop" counter (rows)
for (i in 1:nrow(species.bcd_df)) {
if (i<=j) {
half.species.bcd[i,j] <- "NA" # writes NA values to matrix c by row i and col j
i=i+1
}
else {
half.species.bcd[i,j] <- species.bcd_df[i,j]
}
i=i+1
}
j=j+1
}
env.species.bcd <- cbind(env_data.structural [,1:7], half.species.bcd)
env.species.bcd <- as.data.frame(env.species.bcd)
env.species.bcd$Site <- as.character(env.species.bcd$Site)
env.species.bcd$Subsite <- as.character(env.species.bcd$Subsite)
#For FALL
half.species.bcd.fall <- matrix(nrow=nrow(species.bcd_df.fall), ncol=nrow(species.bcd_df.fall))
j=1  # j is "outer loop" counter (columns); begin at 1
for (j in 1:nrow(species.bcd_df.fall)) {
i=1  # i is "inner loop" counter (rows)
for (i in 1:nrow(species.bcd_df.fall)) {
if (i<=j) {
half.species.bcd.fall[i,j] <- "NA" # writes NA values to matrix c by row i and col j
i=i+1
}
else {
half.species.bcd.fall[i,j] <- species.bcd_df.fall[i,j]
}
i=i+1
}
j=j+1
}
env.species.bcd.fall <- cbind(env_data.structural.fall [,1:7], half.species.bcd.fall)
env.species.bcd.fall <- as.data.frame(env.species.bcd.fall)
env.species.bcd.fall$Site <- as.character(env.species.bcd.fall$Site)
env.species.bcd.fall$Subsite <- as.character(env.species.bcd.fall$Subsite)
#fall.MHC
half.fall.MHC <- matrix(nrow=nrow(bcd.fall.MHC), ncol=nrow(bcd.fall.MHC))
j=1  # j is "outer loop" counter (columns); begin at 1
for (j in 1:nrow(bcd.fall.MHC)) {
i=1  # i is "inner loop" counter (rows)
for (i in 1:nrow(bcd.fall.MHC)) {
if (i<=j) {
half.fall.MHC[i,j] <- "NA" # writes NA values to matrix c by row i and col j
i=i+1
}
else {
half.fall.MHC[i,j] <- bcd.fall.MHC[i,j]
}
i=i+1
}
j=j+1
}
env.bcd.fall.MHC <- cbind(env_data.fall.MHC [,1:7], half.fall.MHC)
env.bcd.fall.MHC <- as.data.frame(env.bcd.fall.MHC)
env.bcd.fall.MHC$Site <- as.character(env.bcd.fall.MHC$Site)
env.bcd.fall.MHC$Subsite <- as.character(env.bcd.fall.MHC$Subsite)
#fall.wil
half.fall.wil <- matrix(nrow=nrow(bcd.fall.wil), ncol=nrow(bcd.fall.wil))
j=1  # j is "outer loop" counter (columns); begin at 1
for (j in 1:nrow(bcd.fall.wil)) {
i=1  # i is "inner loop" counter (rows)
for (i in 1:nrow(bcd.fall.wil)) {
if (i<=j) {
half.fall.wil[i,j] <- "NA" # writes NA values to matrix c by row i and col j
i=i+1
}
else {
half.fall.wil[i,j] <- bcd.fall.wil[i,j]
}
i=i+1
}
j=j+1
}
env.bcd.fall.wil <- cbind(env_data.fall.wil [,1:7], half.fall.wil)
env.bcd.fall.wil <- as.data.frame(env.bcd.fall.wil)
env.bcd.fall.wil$Site <- as.character(env.bcd.fall.wil$Site)
env.bcd.fall.wil$Subsite <- as.character(env.bcd.fall.wil$Subsite)
#winter.MHC
half.winter.MHC <- matrix(nrow=nrow(bcd.winter.MHC), ncol=nrow(bcd.winter.MHC))
j=1  # j is "outer loop" counter (columns); begin at 1
for (j in 1:nrow(bcd.winter.MHC)) {
i=1  # i is "inner loop" counter (rows)
for (i in 1:nrow(bcd.winter.MHC)) {
if (i<=j) {
half.winter.MHC[i,j] <- "NA" # writes NA values to matrix c by row i and col j
i=i+1
}
else {
half.winter.MHC[i,j] <- bcd.winter.MHC[i,j]
}
i=i+1
}
j=j+1
}
env.bcd.winter.MHC <- cbind(env_data.winter.MHC [,1:7], half.winter.MHC)
env.bcd.winter.MHC <- as.data.frame(env.bcd.winter.MHC)
env.bcd.winter.MHC$Site <- as.character(env.bcd.winter.MHC$Site)
env.bcd.winter.MHC$Subsite <- as.character(env.bcd.winter.MHC$Subsite)
#winter.wil
half.winter.wil <- matrix(nrow=nrow(bcd.winter.wil), ncol=nrow(bcd.winter.wil))
j=1  # j is "outer loop" counter (columns); begin at 1
for (j in 1:nrow(bcd.winter.wil)) {
i=1  # i is "inner loop" counter (rows)
for (i in 1:nrow(bcd.winter.wil)) {
if (i<=j) {
half.winter.wil[i,j] <- "NA" # writes NA values to matrix c by row i and col j
i=i+1
}
else {
half.winter.wil[i,j] <- bcd.winter.wil[i,j]
}
i=i+1
}
j=j+1
}
env.bcd.winter.wil<- cbind(env_data.winter.wil [,1:7], half.winter.wil)
env.bcd.winter.wil<- as.data.frame(env.bcd.winter.wil)
env.bcd.winter.wil$Site <- as.character(env.bcd.winter.wil$Site)
env.bcd.winter.wil$Subsite <- as.character(env.bcd.winter.wil$Subsite)
#spring.MHC
half.spring.MHC <- matrix(nrow=nrow(bcd.spring.MHC), ncol=nrow(bcd.spring.MHC))
j=1  # j is "outer loop" counter (columns); begin at 1
for (j in 1:nrow(bcd.spring.MHC)) {
i=1  # i is "inner loop" counter (rows)
for (i in 1:nrow(bcd.spring.MHC)) {
if (i<=j) {
half.spring.MHC[i,j] <- "NA" # writes NA values to matrix c by row i and col j
i=i+1
}
else {
half.spring.MHC[i,j] <- bcd.spring.MHC[i,j]
}
i=i+1
}
j=j+1
}
env.bcd.spring.MHC <- cbind(env_data.spring.MHC [,1:7], half.spring.MHC)
env.bcd.spring.MHC <- as.data.frame(env.bcd.spring.MHC)
env.bcd.spring.MHC$Site <- as.character(env.bcd.spring.MHC$Site)
env.bcd.spring.MHC$Subsite <- as.character(env.bcd.spring.MHC$Subsite)
#spring.wil
half.spring.wil <- matrix(nrow=nrow(bcd.spring.wil), ncol=nrow(bcd.spring.wil))
j=1  # j is "outer loop" counter (columns); begin at 1
for (j in 1:nrow(bcd.spring.wil)) {
i=1  # i is "inner loop" counter (rows)
for (i in 1:nrow(bcd.spring.wil)) {
if (i<=j) {
half.spring.wil[i,j] <- "NA" # writes NA values to matrix c by row i and col j
i=i+1
}
else {
half.spring.wil[i,j] <- bcd.spring.wil[i,j]
}
i=i+1
}
j=j+1
}
env.bcd.spring.wil<- cbind(env_data.spring.wil [,1:7], half.spring.wil)
env.bcd.spring.wil <- as.data.frame(env.bcd.spring.wil)
env.bcd.spring.wil$Site <- as.character(env.bcd.spring.wil$Site)
env.bcd.spring.wil$Subsite <- as.character(env.bcd.spring.wil$Subsite)
```
```{r BCD_function}
library (dplyr)
#data <- env.species.bcd.fall # name data simply
#out<-calc_bcd_dist_matrix(data=env.species.bcd.fall) # where you use the function
# this is the function called calc_bcd_dist_matrix that puts sites and their dissimilarities and distances in a pretty matrix
calc_bcd_dist_matrix <- function(data){
site_subsite <- paste(data$Site, data$Subsite, sep = "_") # identify unique site and subsite combinations
uniq <- unique(unlist(site_subsite))  # saves unique site and subsite combinations as object called 'uniq' so that can use them in the loop below for counting purposes
# Make data frame to store results of outlier detection
results <- data.frame(site_in = character(), subsite_in = character(), id_in = character(), site_far = character(), subsite_far = character(), id_far = character(), dist = integer(), dissim = integer())
p=1 # p is the counter, initialize it at 1, represents number of uniq site and subsite combinations
for (p in 1:length(uniq)){
## In site
a <- rep(data[p,2], nrow(data)) # in site
b <- rep(data[p,3], nrow(data)) # in subsite
IN <- cbind(a,b)
## Far site
NEAR <- data[,2:3] # always the second (site) and thrid (subsite) columns of data, just repeated, for the far
## Dissimilarity
DISS <- data[,p+7] # dissimilarity value is always in the column of p + 7
##Sampling_Period
Sampling_Period <- data[,6]
## Combine results
combo <- cbind(IN, NEAR, Sampling_Period, DISS)
results <- rbind(results, combo)
p=p+1
}
# if need to reset, use these two lines of code
# p <- NULL
# results <- NULL
IN <- results[,1:2]
IN <- as.data.frame(IN)
colnames(IN) <- c("Site", "Subsite")
joining1 <- join(IN, distance.codes, by = c("Site", "Subsite"))
colnames(joining1) <- c("IN_Site", "IN_Subsite", "IN_FID")
joining1$IN_FID <- as.character (joining1$IN_FID)
NEAR <- results[,3:4]
NEAR <-as.data.frame(NEAR)
colnames(NEAR) <- c("Site", "Subsite")
joining2 <- join(NEAR, distance.codes, by = c("Site", "Subsite"))
colnames(joining2)<- c("NEAR_Site", "NEAR_Subsite", "NEAR_FID")
joining2$NEAR_FID <- as.character(joining2$NEAR_FID)
DISS <- results[,6]
DISS <- as.data.frame(DISS)
colnames(DISS) <- "BCD"
Sampling_Period <- results [,5]
Sampling_Period <- as.data.frame(Sampling_Period)
colnames (Sampling_Period) <- "Sampling_Period"
#INhelp <- joining1[,3]
#INhelp <- as.data.frame(INhelp)
#colnames(INhelp) <- c("IN_FID")
#NEARhelp <- joining2[,3]
#NEARhelp <- as.data.frame(NEARhelp)
#colnames(NEARhelp) <- c("NEAR_FID")
#omg$IN_FID <- as.numeric(omg$IN_FID)
#omg$NEAR_FID <- as.numeric(omg$NEAR_FID)
#distance.matrix$IN_FID <- as.numeric(distance.matrix$IN_FID)
#distance.matrix$NEAR_FID <- as.numeric(distance.matrix$NEAR_FID)
#distance.matrix$NEAR_DIST <- as.character(distance.matrix$NEAR_DIST)
#omg <- cbind(INhelp, NEARhelp)
#cookie <- join(distance.matrix, omg, by = c("IN_FID", "NEAR_FID"))
#poop <- join(omg, distance.matrix, by = c("IN_FID", "NEAR_FID"))
#IN.NEAR.diss$IN_FID <- as.numeric(IN.NEAR.diss$IN_FID)
#IN.NEAR.diss$NEAR_FID <- as.numeric(IN.NEAR.diss$NEAR_FID)
distance.matrix$IN_FID <- as.numeric(distance.matrix$IN_FID)
distance.matrix$NEAR_FID <- as.numeric(distance.matrix$NEAR_FID)
distance.matrix$NEAR_DIST <- as.character(distance.matrix$NEAR_DIST)
IN.NEAR.DISS <- cbind(joining1, joining2, Sampling_Period, DISS)
IN.NEAR.DISS$IN_FID <- as.numeric(IN.NEAR.DISS$IN_FID)
IN.NEAR.DISS$NEAR_FID <- as.numeric(IN.NEAR.DISS$NEAR_FID)
dist.IN.NEAR.DISS <- join(IN.NEAR.DISS, distance.matrix, by = c ("IN_FID", "NEAR_FID"))
#dist.IN.NEAR.diss <- join(distance.matrix, IN.NEAR.diss, by = c("IN_FID", "NEAR_FID"))
#heeeelp <- filter(dist.IN.NEAR.diss, IN_Site != 'NA')
dist.IN.NEAR.DISS
}
all.species <-calc_bcd_dist_matrix(data=env.species.bcd)
fall.MHC<-calc_bcd_dist_matrix(data=env.bcd.fall.MHC) # where you use the function
fall.wil<-calc_bcd_dist_matrix(data=env.bcd.fall.wil) # where you use the function
winter.MHC<-calc_bcd_dist_matrix(data=env.bcd.winter.MHC) # where you use the function
winter.wil<-calc_bcd_dist_matrix(data=env.bcd.winter.wil) # where you use the function
spring.MHC<-calc_bcd_dist_matrix(data=env.bcd.spring.MHC) # where you use the function
spring.wil<-calc_bcd_dist_matrix(data=env.bcd.spring.wil) # where you use the function
```
```{r BCD_filter}
all.species.f <- filter(all.species, BCD != 'NA')
all.species.f <- filter(all.species.f, NEAR_DIST != 'NA')
all.species.f$BCD <- as.character(all.species.f$BCD)
all.species.f$BCD <- as.numeric(all.species.f$BCD)
all.species.f$NEAR_DIST <- as.numeric(all.species.f$NEAR_DIST)
all.species.f <- mutate(all.species.f, NEAR_DIST_nautical = NEAR_DIST / 6076.12) #nautical miles
fall.MHC.f <- filter(fall.MHC, BCD != 'NA')
fall.MHC.f <- filter(fall.MHC.f, NEAR_DIST != 'NA')
fall.MHC.f$BCD <- as.character(fall.MHC.f$BCD)
fall.MHC.f$BCD <- as.numeric(fall.MHC.f$BCD)
fall.MHC.f$NEAR_DIST <- as.numeric(fall.MHC.f$NEAR_DIST)
fall.MHC.f <- mutate(fall.MHC.f, NEAR_DIST_nautical = NEAR_DIST / 6076.12) #nautical miles
fall.wil.f<- filter(fall.wil, BCD != 'NA')
fall.wil.f <- filter(fall.wil.f, NEAR_DIST != 'NA')
fall.wil.f$BCD <- as.character(fall.wil.f$BCD)
fall.wil.f$BCD <- as.numeric(fall.wil.f$BCD)
fall.wil.f$NEAR_DIST <- as.numeric(fall.wil.f$NEAR_DIST)
fall.wil.f <- mutate(fall.wil.f, NEAR_DIST_nautical = NEAR_DIST / 6076.12) #nautical miles
winter.MHC.f<- filter(winter.MHC, BCD != 'NA')
winter.MHC.f <- filter(winter.MHC.f, NEAR_DIST != 'NA')
winter.MHC.f$BCD <- as.character(winter.MHC.f$BCD)
winter.MHC.f$BCD <- as.numeric(winter.MHC.f$BCD)
winter.MHC.f$NEAR_DIST <- as.numeric(winter.MHC.f$NEAR_DIST)
winter.MHC.f <- mutate(winter.MHC.f, NEAR_DIST_nautical = NEAR_DIST / 6076.12) #nautical miles
winter.wil.f<- filter(winter.wil, BCD != 'NA')
winter.wil.f <- filter(winter.wil.f, NEAR_DIST != 'NA')
winter.wil.f$BCD <- as.character(winter.wil.f$BCD)
winter.wil.f$BCD <- as.numeric(winter.wil.f$BCD)
winter.wil.f$NEAR_DIST <- as.numeric(winter.wil.f$NEAR_DIST)
winter.wil.f <- mutate(winter.wil.f, NEAR_DIST_nautical = NEAR_DIST / 6076.12) #nautical miles
spring.MHC.f<- filter(spring.MHC, BCD != 'NA')
spring.MHC.f <- filter(spring.MHC.f, NEAR_DIST != 'NA')
spring.MHC.f$BCD <- as.character(spring.MHC.f$BCD)
spring.MHC.f$BCD <- as.numeric(spring.MHC.f$BCD)
spring.MHC.f$NEAR_DIST <- as.numeric(spring.MHC.f$NEAR_DIST)
spring.MHC.f <- mutate(spring.MHC.f, NEAR_DIST_nautical = NEAR_DIST / 6076.12) #nautical miles
spring.wil.f<- filter(spring.wil, BCD != 'NA')
spring.wil.f <- filter(spring.wil.f, NEAR_DIST != 'NA')
spring.wil.f$BCD <- as.character(spring.wil.f$BCD)
spring.wil.f$BCD <- as.numeric(spring.wil.f$BCD)
spring.wil.f$NEAR_DIST <- as.numeric(spring.wil.f$NEAR_DIST)
spring.wil.f <- mutate(spring.wil.f, NEAR_DIST_nautical = NEAR_DIST / 6076.12) #nautical miles
#filter by site
site330.fall <- filter(fall.MHC.f, IN_Site == '330' & NEAR_Site == '330')
site330.winter <- filter(winter.MHC.f, IN_Site == '330' & NEAR_Site == '330')
site330.spring <- filter(spring.MHC.f, IN_Site == '330' & NEAR_Site == '330')
site345.fall <- filter(fall.MHC.f, IN_Site == '345' & NEAR_Site == '345')
site345.winter<- filter(winter.MHC.f, IN_Site == '345' & NEAR_Site == '345')
site345.spring <- filter(spring.MHC.f, IN_Site == '345' & NEAR_Site == '345')
site364.fall<- filter(fall.wil.f, IN_Site == '364' & NEAR_Site == '364')
site364.winter<- filter(winter.wil.f, IN_Site == '364' & NEAR_Site == '364')
site364.spring<- filter(spring.wil.f, IN_Site == '364' & NEAR_Site == '364')
site370.fall<- filter(fall.wil.f, IN_Site == '370' & NEAR_Site == '370')
site370.winter<- filter(winter.wil.f, IN_Site == '370' & NEAR_Site == '370')
site370.spring<- filter(spring.wil.f, IN_Site == '370' & NEAR_Site == '370')
site372.fall<- filter(fall.wil.f, IN_Site == '372' & NEAR_Site == '372')
site372.winter<- filter(winter.wil.f, IN_Site == '372' & NEAR_Site == '372')
site372.spring<- filter(spring.wil.f, IN_Site == '372' & NEAR_Site == '372')
site378.fall<- filter(fall.wil.f, IN_Site == '378' & NEAR_Site == '378')
site378.winter<- filter(winter.wil.f, IN_Site == '378' & NEAR_Site == '378')
site378.spring<- filter(spring.wil.f, IN_Site == '378' & NEAR_Site == '378')
#combine MHC
MHC <- rbind(fall.MHC.f, winter.MHC.f, spring.MHC.f)
#combine wil
wil <- rbind(fall.wil.f, winter.wil.f, spring.wil.f)
```
plot.all = ggplot(all.species.f, aes(x=as.numeric(NEAR_DIST_nautical), y=as.numeric(BCD)))
plot.all + geom_point () +theme_classic () +  scale_y_continuous(name="Bray Curtis Dissimilarity", limits=c(0, 1), breaks=seq(0, 1, by=0.05)) + scale_x_continuous(name = "Distance", limits=c(0, 60), breaks=seq(0, 60,by=1))
plot.all = ggplot(all.species.f, aes(x=as.numeric(NEAR_DIST_nautical), y=as.numeric(BCD)))
plot.all + geom_point (aes(colour = Sampling_Period)) +theme_classic () +  scale_y_continuous(name="Bray Curtis Dissimilarity", limits=c(0, 1), breaks=seq(0, 1, by=0.05)) + scale_x_continuous(name = "Distance", limits=c(0, 60), breaks=seq(0, 60,by=10)) + geom_smooth(aes(colour = Sampling_Period))
