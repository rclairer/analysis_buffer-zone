}
}
pos <- matrix(nrow=nrow(env.species.veg), ncol=2)
j=1  # j is "outer loop" counter (columns); begin at 1
for (j in 1:2) {
i=1  # i is "inner loop" counter (rows)
for (i in 1:nrow(env.species.veg)) {
if (i<= nrow(env.species.veg)) {
pos[i,j] <- env.species.veg [i,2]
i=i+1
}
else {
break
}
i=i+1
}
j=j+1
for (i in 1:nrow(env.species.veg)){
if (i <= nrow(env.species.veg)) {
pos[i,j] <- env.species.veg [i,3]
i=i+1
}
else {
break
}
i=i+1
}
}
pos <- matrix(nrow=nrow(env.species.veg), ncol=2)
j=1  # j is "outer loop" counter (columns); begin at 1
for (j in 1:2) {
i=1  # i is "inner loop" counter (rows)
for (i in 1:nrow(env.species.veg)) {
if (i<= nrow(env.species.veg)) {
pos[i,j] <- env.species.veg [i,2]
i=i+1
}
else {
break
}
i=i+1
j=j+1
for (i in 1:nrow(env.species.veg)){
if (i <= nrow(env.species.veg)) {
pos[i,j] <- env.species.veg [i,3]
i=i+1
}
else {
break
}
i=i+1
}
}
}
pos <- matrix(nrow=nrow(env.species.veg), ncol=2)
j=1  # j is "outer loop" counter (columns); begin at 1
for (j in 1:2) {
i=1  # i is "inner loop" counter (rows)
if j = 1
for (i in 1:nrow(env.species.veg)) {
if (i<= nrow(env.species.veg)) {
pos[i,j] <- env.species.veg [i,2]
i=i+1
}
else {
break
}
i=i+1
}
if j = 2
for (i in 1:nrow(env.species.veg)){
if (i <= nrow(env.species.veg)) {
pos[i,j] <- env.species.veg [i,3]
i=i+1
}
else {
break
}
i=i+1
}
pos <- matrix(nrow=nrow(env.species.veg), ncol=2)
j=1  # j is "outer loop" counter (columns); begin at 1
for (j in 1:2) {
i=1  # i is "inner loop" counter (rows)
if j = 1 {
for (i in 1:nrow(env.species.veg)) {
if (i<= nrow(env.species.veg)) {
pos[i,j] <- env.species.veg [i,2]
i=i+1
}
else {
break
}
i=i+1
}
}
if j = 2{
for (i in 1:nrow(env.species.veg)){
if (i <= nrow(env.species.veg)) {
pos[i,j] <- env.species.veg [i,3]
i=i+1
}
else {
break
}
i=i+1
}
}
pos <- matrix(nrow=nrow(env.species.veg), ncol=2)
j=1  # j is "outer loop" counter (columns); begin at 1
for (j in 1:2) {
i=1  # i is "inner loop" counter (rows)
if (j == 1) {
for (i in 1:nrow(env.species.veg)) {
if (i<= nrow(env.species.veg)) {
pos[i,j] <- env.species.veg [i,2]
i=i+1
}
else {
break
}
i=i+1
}
}
if (j == 2){
for (i in 1:nrow(env.species.veg)){
if (i <= nrow(env.species.veg)) {
pos[i,j] <- env.species.veg [i,3]
i=i+1
}
else {
break
}
i=i+1
}
}
}
View(pos)
View(l)
View(distance.codes)
View(distance.matrix)
turdle <- matrix(nrow=nrow(env.species.veg), ncol=2)
j=1  # j is "outer loop" counter (columns); begin at 1
for (j in 1:2) {
i=1  # i is "inner loop" counter (rows)
if (j == 1) {
for (i in 1:nrow(env.species.veg)) {
if (i<= nrow(env.species.veg)) {
turdle[i,j] <- env.species.veg [1,2]
i=i+1
}
else {
break
}
i=i+1
}
}
if (j == 2){
for (i in 1:nrow(env.species.veg)){
if (i <= nrow(env.species.veg)) {
tudtle[i,j] <- env.species.veg [1,3]
i=i+1
}
else {
break
}
i=i+1
}
}
}
turdle <- matrix(nrow=nrow(env.species.veg), ncol=2)
j=1  # j is "outer loop" counter (columns); begin at 1
for (j in 1:2) {
i=1  # i is "inner loop" counter (rows)
if (j == 1) {
for (i in 1:nrow(env.species.veg)) {
if (i<= nrow(env.species.veg)) {
turdle[i,j] <- env.species.veg [1,2]
i=i+1
}
else {
break
}
i=i+1
}
}
if (j == 2){
for (i in 1:nrow(env.species.veg)){
if (i <= nrow(env.species.veg)) {
turdle[i,j] <- env.species.veg [1,3]
i=i+1
}
else {
break
}
i=i+1
}
}
}
View(turdle)
poas <- matrix(nrow=nrow(env.species.veg), ncol=1)
j=1  # j is "outer loop" counter (columns); begin at 1
for (j in 1:1) {
i=1  # i is "inner loop" counter (rows)
for (i in 1:nrow(env.species.veg)) {
if (i<= nrow(env.species.veg)) {
poas[i,j] <- env.species.veg [i,8]
i=i+1
}
else {
break
}
i=i+1
}
}
View(poas)
env.species.veg$`1` <- as.character(env.species.veg$'1')
poas <- matrix(nrow=nrow(env.species.veg), ncol=1)
j=1  # j is "outer loop" counter (columns); begin at 1
for (j in 1:1) {
i=1  # i is "inner loop" counter (rows)
for (i in 1:nrow(env.species.veg)) {
if (i<= nrow(env.species.veg)) {
poas[i,j] <- env.species.veg [i,8]
i=i+1
}
else {
break
}
i=i+1
}
}
View(poas)
View(turdle)
turdle <- rename(turdle, V1 = "Site")
turdle <- rename(turdle, V1 = Site)
library(dplyr)
turdle <- rename(turdle, V1 = Site)
turdle <- select(turdle, V1 = Site)
turdle <- as.matrix(turdle)
turdle <- select(turdle, V1 = Site)
turdle <- rename(turdle, V1 = Site)
names(turdle)
turdle <- rename(turdle, turdle[,1] = Site)
turdle$V1
turdle <- as.matrix(turdle)
turdle
turdle$[,1]
turdle$"[,1]"
turdle <- as.data.frame(turdle)
names(turdle)
turdle <- rename(turdle, "V1" = "Site")
turdle <- rename(turdle, V1 = "Site")
colnames(turdle)
colnames(turdle) <- c("Site", "Subsite")
turdle
names(distance.codes)
distance.codes <- as.data.frame(distance.codes)
names(distance.codes)
joining1 <- join(turdle, distance.codes, by = c("Site", "Subsite"))
View(joining1)
pos <-as.data.frame(pos)
names(pos)
colnames(pos) <- c("Site", "Subsite")
joining2 <- join(joining1, pos, by = c("Site", "Subsite"))
View(joining2)
joining2 <- join(pos, distance.codes, by = c("Site", "Subsite"))
View(joining2)
poas <- as.data.frame(pos)
names(pos)
poas <- matrix(nrow=nrow(env.species.veg), ncol=1)
j=1  # j is "outer loop" counter (columns); begin at 1
for (j in 1:1) {
i=1  # i is "inner loop" counter (rows)
for (i in 1:nrow(env.species.veg)) {
if (i<= nrow(env.species.veg)) {
poas[i,j] <- env.species.veg [i,8]
i=i+1
}
else {
break
}
i=i+1
}
}
poas <- as.data.frame(poas)
colnames(poas)
colnames(poas) <- "Bray_Curtis_Dissimilarity"
View(poas)
joining3 <- join(joining1, joining2, by = c("Site", "Subsite"))
View(joining3)
cats <- cbind(joining1, joining2)
View(cats)
View(cats)
colnames(joining1) <- c("Site", "Subsite", "IN_FID")
View(joining1)
colnames(joining2)<- c("Site", "Subsite", "NEAR_FID")
cats <- cbind(joining1, joining2)
View(cats)
View(distance.matrix)
coquina <- merge(cats, distance.matrix, by = c("IN_FID", "NEAR_FID"))
View(coquina)
distance.matrix <- as.data.frame(distance.matrix)
coquina <- join(cats, distance.matrix, by = c("IN_FID", "NEAR_FID"))
View(coquina)
distance.matrix$NEAR_DIST <- as.character(distance.matrix$NEAR_DIST)
coquina <- join(cats, distance.matrix, by = c("IN_FID", "NEAR_FID"))
View(coquina)
coquina <- join(distance.matrix, cats, by = c("IN_FID", "NEAR_FID"))
View(coquina)
View(cats)
colnames(joining1) <- c("IN_Site", "IN_Subsite", "IN_FID")
colnames(joining2)<- c("NEAR_Site", "NEAR_Subsite", "NEAR_FID")
cats <- cbind(joining1, joining2)
View(cats)
coquina <- join(distance.matrix, cats, by = c("IN_FID", "NEAR_FID"))
View(coquina)
surfing <- cbind(coquina, poas)
cats <- cbind(joining1, joining2, poas)
View(cats)
coquina <- join(distance.matrix, cats, by = c("IN_FID", "NEAR_FID"))
View(coquina)
surfing <- cbind(coquina[,4:5], coquina[,1], coquina[,6:7], coquina[,2], coquina[,3], coquina[,8])
View(surfing)
names(coquina)
surfing <- coquina[,c(4,5,1,6,7,2,3,8)]
View(surfing)
claude <- filter(surfing, Bray_Curtis_Dissimilarity != 'NA')
claude <- filter(surfing, Bray_Curtis_Dissimilarity != 'NA')
View(claude)
claude <- filter(surfing, IN_FID != 'NA')
View(claude)
claude <- filter(surfing, IN_Site != 'NA')
View(claude)
coquina <- join(distance.matrix, cats, by = c("IN_FID", "NEAR_FID"))
surfing <- coquina[,c(4,5,1,6,7,2,3,8)]
claude <- filter(surfing, IN_Site != 'NA')
View(claude)
View(cats)
View(claude)
View(claude)
library(ggplot2)
ggplot(claude, aes(NEAR_DIST, Bray_Curtis_Dissimilarity))
ggplot(claude, aes(NEAR_DIST, Bray_Curtis_Dissimilarity)) + geom_curve()
ggplot(claude, aes(NEAR_DIST, Bray_Curtis_Dissimilarity)) + geom_smooth()
ggplot(claude, aes(x=as.factor(NEAR_DIST), y=as.factor(Bray_Curtis_Dissimilarity)) +
theme_classic()
ggplot(claude, aes(x=as.factor(NEAR_DIST), y=as.factor(Bray_Curtis_Dissimilarity))) +
theme_classic()#+
ggplot(claude, aes(x=as.factor(NEAR_DIST), y=as.factor(Bray_Curtis_Dissimilarity))) #
ggplot(claude, aes(x=as.factor(NEAR_DIST), y=as.factor(Bray_Curtis_Dissimilarity)))
+ geom_smooth ()
help = ggplot(claude, aes(x=as.factor(NEAR_DIST), y=as.factor(Bray_Curtis_Dissimilarity)))
help + geom_point ()
help + geom_point () +theme_classic
help + geom_point () +theme_classic ()
help + geom_point () +theme_classic () + scale_y_continuous(name="Bray Curtis Dissimilarity",
limits=c(0, 1),
breaks=seq(0, 1,by=0.05)) +
theme(axis.text=element_text(size=16, colour="black"),
axis.title.x=element_text(size=16, colour="black", vjust=-.5),
axis.title.y=element_text(size=16, colour="black", vjust=1.3),
legend.position="none") +
scale_x_continuous(name = "Distance", limits=c(0, 400000),
breaks=seq(0, 400000,by=100))
help + geom_point () +theme_classic () + scale_y_continuous(name="Bray Curtis Dissimilarity",
limits=c(0, 1),
breaks=seq(0, 1,by=0.05))
help + geom_point () +theme_classic () +
scale_y_continuous(name="Bray Curtis Dissimilarity", limits=c(0, 1), breaks=seq(0, 1, by=0.05))
help + geom_point () +theme_classic () +
scale_y_continuous(name="Bray Curtis Dissimilarity")#, limits=c(0, 1), breaks=seq(0, 1, by=0.05))
help + geom_point () +theme_classic ()
+
theme(axis.text=element_text(size=16, colour="black"),
axis.title.x=element_text(size=16, colour="black", vjust=-.5),
axis.title.y=element_text(size=16, colour="black", vjust=1.3),
legend.position="none")
help = ggplot(claude, aes(x=as.factor(NEAR_DIST), y=as.factor(Bray_Curtis_Dissimilarity)))
help + geom_point () +theme_classic ()
help = ggplot(claude, aes(x=(NEAR_DIST), y=(Bray_Curtis_Dissimilarity)))
help + geom_point () +theme_classic ()
+
scale_y_continuous(name="Bray Curtis Dissimilarity")#, limits=c(0, 1), breaks=seq(0, 1, by=0.05))
help + geom_point () +theme_classic ()
+
scale_y_continuous(name="Bray Curtis Dissimilarity")#, limits=c(0, 1), breaks=seq(0, 1, by=0.05))
help + geom_point () +theme_classic ()
+
scale_y_continuous(name="Bray Curtis Dissimilarity", limits=c(0, 1), breaks=seq(0, 1, by=0.05))
help + geom_point () +theme_classic ()
+
scale_y_continuous(name="Bray Curtis Dissimilarity", limits=c(0, 0.99), breaks=seq(0, 1, by=0.05))
claude <- filter(surfing, IN_Site != 'NA')
help = ggplot(claude, aes(x=NEAR_DIST, y=Bray_Curtis_Dissimilarity))
help + geom_point () +theme_classic ()
help + geom_point () +theme_classic ()
+
scale_y_continuous(name="Bray Curtis Dissimilarity", limits=c(0, 0.99), breaks=seq(0, 1, by=0.05))
help + geom_point () +theme_classic ()
+
scale_y_continuous(name="Bray Curtis Dissimilarity")#, limits=c(0, 0.99), breaks=seq(0, 1, by=0.05))
help = ggplot(claude, aes(x=NEAR_DIST, y=Bray_Curtis_Dissimilarity))
help + geom_point () +theme_classic () +  scale_y_continuous(name="Bray Curtis Dissimilarity")#, limits=c(0, 0.99), breaks=seq(0, 1, by=0.05))
help = ggplot(claude, aes(x=as.numeric(NEAR_DIST), y=as.numeric(Bray_Curtis_Dissimilarity)))
help + geom_point () +theme_classic () +  scale_y_continuous(name="Bray Curtis Dissimilarity")#, limits=c(0, 0.99), breaks=seq(0, 1, by=0.05))
help = ggplot(claude, aes(x=as.numeric(NEAR_DIST), y=as.numeric(Bray_Curtis_Dissimilarity)))
help + geom_point () +theme_classic () +  scale_y_continuous(name="Bray Curtis Dissimilarity", limits=c(0, 0.99), breaks=seq(0, 1, by=0.05))
help = ggplot(claude, aes(x=as.numeric(NEAR_DIST), y=as.numeric(Bray_Curtis_Dissimilarity)))
help + geom_point () +theme_classic () +  scale_y_continuous(name="Bray Curtis Dissimilarity", limits=c(0, 0.99), breaks=seq(0, 1, by=0.05))
+
scale_x_continuous(name = "Distance", limits=c(0, 400000),
breaks=seq(0, 400000,by=100))
help = ggplot(claude, aes(x=as.numeric(NEAR_DIST), y=as.numeric(Bray_Curtis_Dissimilarity)))
help + geom_point () +theme_classic () +  scale_y_continuous(name="Bray Curtis Dissimilarity", limits=c(0, 0.99), breaks=seq(0, 0.99, by=0.05))
+
scale_x_continuous(name = "Distance", limits=c(0, 400000),
breaks=seq(0, 400000,by=100))
help = ggplot(claude, aes(x=as.numeric(NEAR_DIST), y=as.numeric(Bray_Curtis_Dissimilarity)))
help + geom_point () +theme_classic () +  scale_y_continuous(name="Bray Curtis Dissimilarity", limits=c(0, 0.99), breaks=seq(0, 0.99, by=0.05)) + scale_x_continuous(name = "Distance", limits=c(0, 400000), breaks=seq(0, 400000,by=100))
help = ggplot(claude, aes(x=as.numeric(NEAR_DIST), y=as.numeric(Bray_Curtis_Dissimilarity)))
help + geom_point () +theme_classic () +  scale_y_continuous(name="Bray Curtis Dissimilarity", limits=c(0, 1), breaks=seq(0, 1, by=0.05)) + scale_x_continuous(name = "Distance", limits=c(0, 400000), breaks=seq(0, 400000,by=100))
help = ggplot(claude, aes(x=as.numeric(NEAR_DIST), y=as.numeric(Bray_Curtis_Dissimilarity)))
help + geom_point () +theme_classic () +  scale_y_continuous(name="Bray Curtis Dissimilarity", limits=c(0, 5), breaks=seq(0, 5, by=0.05)) + scale_x_continuous(name = "Distance", limits=c(0, 400000), breaks=seq(0, 400000,by=100))
help = ggplot(claude, aes(x=as.numeric(NEAR_DIST), y=as.numeric(Bray_Curtis_Dissimilarity)))
help + geom_point () +theme_classic () +  scale_y_continuous(name="Bray Curtis Dissimilarity", limits=c(0, 100), breaks=seq(0, 100, by=5)) + scale_x_continuous(name = "Distance", limits=c(0, 400000), breaks=seq(0, 400000,by=100))
min(claude$Bray_Curtis_Dissimilarity)
claude$Bray_Curtis_Dissimilarity <- as.numeric(claude$Bray_Curtis_Dissimilarity)
claude$NEAR_DIST <- as.numeric(claude$NEAR_DIST)
help = ggplot(claude, aes(x=as.numeric(NEAR_DIST), y=as.numeric(Bray_Curtis_Dissimilarity)))
claude$NEAR_DIST
claude$Bray_Curtis_Dissimilarity
claude <- filter(surfing, IN_Site != 'NA')
claude$Bray_Curtis_Dissimilarity
claude$Bray_Curtis_Dissimilarity <- as.character(claude$Bray_Curtis_Dissimilarity)
claude$Bray_Curtis_Dissimilarity
claude$Bray_Curtis_Dissimilarity <- as.numeric(claude$Bray_Curtis_Dissimilarity)
claude$Bray_Curtis_Dissimilarity
help = ggplot(claude, aes(x=as.numeric(NEAR_DIST), y=as.numeric(Bray_Curtis_Dissimilarity)))
help + geom_point () +theme_classic () +  scale_y_continuous(name="Bray Curtis Dissimilarity", limits=c(0, 1), breaks=seq(0, 1, by=0.05)) + scale_x_continuous(name = "Distance", limits=c(0, 400000), breaks=seq(0, 400000,by=100))
max(claude$NEAR_DIST)
help = ggplot(claude, aes(x=as.numeric(NEAR_DIST), y=as.numeric(Bray_Curtis_Dissimilarity)))
help + geom_point () +theme_classic () +  scale_y_continuous(name="Bray Curtis Dissimilarity", limits=c(0, 1), breaks=seq(0, 1, by=0.05)) + scale_x_continuous(name = "Distance", limits=c(0, 60000), breaks=seq(0, 60000,by=100))
help = ggplot(claude, aes(x=as.numeric(NEAR_DIST), y=as.numeric(Bray_Curtis_Dissimilarity)))
help + geom_point () +theme_classic () +  scale_y_continuous(name="Bray Curtis Dissimilarity", limits=c(0, 1), breaks=seq(0, 1, by=0.05)) + scale_x_continuous(name = "Distance", limits=c(0, 60000), breaks=seq(0, 60000,by=6000))
claude$NEAR_DIST <- transmute(claude, NEAR_DIST = NEAR_DIST/ 6076.12)
claude <- transmute(claude, NEAR_DIST = NEAR_DIST/ 6076.12)
#I should make this into naudical miles
claude <- mutate(claude, NEAR_DIST_nautical = NEAR_DIST/ 6076.12)
claude$NEAR_DIST <- as.numeric(claude$NEAR_DIST)
claude <- mutate(claude, NEAR_DIST_nautical = NEAR_DIST / 6076.12)
View(claude)
help = ggplot(claude, aes(x=as.numeric(NEAR_DIST_nautical), y=as.numeric(Bray_Curtis_Dissimilarity)))
help + geom_point () +theme_classic () +  scale_y_continuous(name="Bray Curtis Dissimilarity", limits=c(0, 1), breaks=seq(0, 1, by=0.05)) + scale_x_continuous(name = "Distance", limits=c(0, 60), breaks=seq(0, 60,by=10))
View(winter.structural.data)
View(species.env.bcd.fall)
half.species.bcd.fall <- matrix(nrow=nrow(species.bcd.fall), ncol=nrow(species.bcd.fall))
j=1  # j is "outer loop" counter (columns); begin at 1
for (j in 1:nrow(species.bcd.fall)) {
i=1  # i is "inner loop" counter (rows)
for (i in 1:nrow(species.bcd.fall)) {
if (i<=j) {
d[i,j] <- "NA" # writes NA values to matrix c by row i and col j
i=i+1
}
else {
d[i,j] <- species.bcd.fall[i,j]
}
i=i+1
}
j=j+1
}
View(species.bcd_df)
half.species.bcd.fall <- matrix(nrow=nrow(species.bcd_df.fall), ncol=nrow(species.bcd_df.fall))
j=1  # j is "outer loop" counter (columns); begin at 1
for (j in 1:nrow(species.bcd_df.fall)) {
i=1  # i is "inner loop" counter (rows)
for (i in 1:nrow(species.bcd_df.fall)) {
if (i<=j) {
d[i,j] <- "NA" # writes NA values to matrix c by row i and col j
i=i+1
}
else {
d[i,j] <- species.bcd_df.fall[i,j]
}
i=i+1
}
j=j+1
}
View(half.species.bcd.fall)
half.species.bcd.fall <- matrix(nrow=nrow(species.bcd_df.fall), ncol=nrow(species.bcd_df.fall))
half.species.bcd.fall <- matrix(nrow=nrow(species.bcd_df.fall), ncol=nrow(species.bcd_df.fall))
j=1  # j is "outer loop" counter (columns); begin at 1
for (j in 1:nrow(species.bcd_df.fall)) {
i=1  # i is "inner loop" counter (rows)
for (i in 1:nrow(species.bcd_df.fall)) {
if (i<=j) {
half.species.bcd.fall[i,j] <- "NA" # writes NA values to matrix c by row i and col j
i=i+1
}
else {
half.species.bcd.fall[i,j] <- species.bcd_df.fall[i,j]
}
i=i+1
}
j=j+1
}
View(half.species.bcd.fall)
env.species.bcd.fall <- cbind(env_data.fall [,1:7], half.species.bcd.fall)
env.species.bcd.fall <- cbind(env_data.structural.fall [,1:7], half.species.bcd.fall)
View(env.species.bcd.fall)
View(new4)
